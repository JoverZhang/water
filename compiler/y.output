Grammar

    0 $accept: translation_unit $end

    1 translation_unit: initial_declaration definition_or_statement
    2                 | translation_unit definition_or_statement

    3 initial_declaration: ε
    4                    | require_list rename_list
    5                    | require_list
    6                    | rename_list

    7 require_list: require_declaration
    8             | require_list require_declaration

    9 require_declaration: REQUIRE package_name SEMICOLON

   10 package_name: IDENTIFIER
   11             | package_name DOT IDENTIFIER

   12 rename_list: rename_declaration
   13            | rename_list rename_declaration

   14 rename_declaration: RENAME package_name IDENTIFIER SEMICOLON

   15 definition_or_statement: function_definition
   16                        | class_definition
   17                        | statement
   18                        | delegate_definition
   19                        | enum_definition
   20                        | const_definition

   21 basic_type_specifier: VOID_T
   22                     | BOOLEAN_T
   23                     | INT_T
   24                     | DOUBLE_T
   25                     | STRING_T
   26                     | NATIVE_POINTER_T

   27 identifier_type_specifier: IDENTIFIER

   28 array_type_specifier: basic_type_specifier LB RB
   29                     | IDENTIFIER LB RB
   30                     | array_type_specifier LB RB

   31 type_specifier: basic_type_specifier
   32               | array_type_specifier
   33               | identifier_type_specifier

   34 function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause block
   35                    | type_specifier IDENTIFIER LP RP throws_clause block
   36                    | type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
   37                    | type_specifier IDENTIFIER LP RP throws_clause SEMICOLON

   38 parameter_list: type_specifier IDENTIFIER
   39               | parameter_list COMMA type_specifier IDENTIFIER

   40 argument_list: assignment_expression
   41              | argument_list COMMA assignment_expression

   42 statement_list: statement
   43               | statement_list statement

   44 expression: assignment_expression
   45           | expression COMMA assignment_expression

   46 assignment_expression: logical_or_expression
   47                      | primary_expression assignment_operator assignment_expression

   48 assignment_operator: ASSIGN_T
   49                    | ADD_ASSIGN_T
   50                    | SUB_ASSIGN_T
   51                    | MUL_ASSIGN_T
   52                    | DIV_ASSIGN_T
   53                    | MOD_ASSIGN_T

   54 logical_or_expression: logical_and_expression
   55                      | logical_or_expression LOGICAL_OR logical_and_expression

   56 logical_and_expression: equality_expression
   57                       | logical_and_expression LOGICAL_AND equality_expression

   58 equality_expression: relational_expression
   59                    | equality_expression EQ relational_expression
   60                    | equality_expression NE relational_expression

   61 relational_expression: additive_expression
   62                      | relational_expression GT additive_expression
   63                      | relational_expression GE additive_expression
   64                      | relational_expression LT additive_expression
   65                      | relational_expression LE additive_expression

   66 additive_expression: multiplicative_expression
   67                    | additive_expression ADD multiplicative_expression
   68                    | additive_expression SUB multiplicative_expression

   69 multiplicative_expression: unary_expression
   70                          | multiplicative_expression MUL unary_expression
   71                          | multiplicative_expression DIV unary_expression
   72                          | multiplicative_expression MOD unary_expression
   73                          | multiplicative_expression BIT_AND unary_expression
   74                          | multiplicative_expression BIT_OR unary_expression
   75                          | multiplicative_expression BIT_XOR unary_expression

   76 unary_expression: postfix_expression
   77                 | SUB unary_expression
   78                 | EXCLAMATION unary_expression
   79                 | BIT_NOT unary_expression

   80 postfix_expression: primary_expression
   81                   | primary_expression INCREMENT
   82                   | primary_expression DECREMENT
   83                   | primary_expression INSTANCEOF type_specifier

   84 primary_expression: primary_no_new_array
   85                   | array_creation
   86                   | IDENTIFIER

   87 primary_no_new_array: primary_no_new_array LB expression RB
   88                     | IDENTIFIER LB expression RB
   89                     | primary_expression DOT IDENTIFIER
   90                     | primary_expression LP argument_list RP
   91                     | primary_expression LP RP
   92                     | LP expression RP
   93                     | primary_expression DOWN_CAST_BEGIN type_specifier DOWN_CAST_END
   94                     | INT_LITERAL
   95                     | DOUBLE_LITERAL
   96                     | STRING_LITERAL
   97                     | REGEXP_LITERAL
   98                     | TRUE_T
   99                     | FALSE_T
  100                     | NULL_T
  101                     | array_literal
  102                     | THIS_T
  103                     | SUPER_T
  104                     | NEW IDENTIFIER LP RP
  105                     | NEW IDENTIFIER LP argument_list RP
  106                     | NEW IDENTIFIER DOT IDENTIFIER LP RP
  107                     | NEW IDENTIFIER DOT IDENTIFIER LP argument_list RP

  108 array_literal: LC RC
  109              | LC expression_list RC
  110              | LC expression_list COMMA RC

  111 array_creation: NEW basic_type_specifier dimension_expression_list
  112               | NEW basic_type_specifier dimension_expression_list dimension_list
  113               | NEW identifier_type_specifier dimension_expression_list
  114               | NEW identifier_type_specifier dimension_expression_list dimension_list

  115 dimension_expression_list: dimension_expression
  116                          | dimension_expression_list dimension_expression

  117 dimension_expression: LB expression RB

  118 dimension_list: LB RB
  119               | dimension_list LB RB

  120 expression_list: assignment_expression
  121                | expression_list COMMA assignment_expression

  122 statement: expression SEMICOLON
  123          | if_statement
  124          | switch_statement
  125          | while_statement
  126          | for_statement
  127          | do_while_statement
  128          | foreach_statement
  129          | return_statement
  130          | break_statement
  131          | continue_statement
  132          | try_statement
  133          | throw_statement
  134          | declaration_statement

  135 if_statement: IF LP expression RP block
  136             | IF LP expression RP block ELSE block
  137             | IF LP expression RP block elsif_list
  138             | IF LP expression RP block elsif_list ELSE block

  139 elsif_list: elsif
  140           | elsif_list elsif

  141 elsif: ELSIF LP expression RP block

  142 label_opt: ε
  143          | IDENTIFIER COLON

  144 switch_statement: SWITCH LP expression RP case_list default_opt

  145 case_list: one_case
  146          | case_list one_case

  147 one_case: CASE case_expression_list block

  148 default_opt: ε
  149            | DEFAULT_T block

  150 case_expression_list: assignment_expression
  151                     | expression_list COMMA assignment_expression

  152 while_statement: label_opt WHILE LP expression RP block

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

  154 do_while_statement: label_opt DO_T block WHILE LP expression RP SEMICOLON

  155 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block

  156 expression_opt: ε
  157               | expression

  158 return_statement: RETURN_T expression_opt SEMICOLON

  159 identifier_opt: ε
  160               | IDENTIFIER

  161 break_statement: BREAK identifier_opt SEMICOLON

  162 continue_statement: CONTINUE identifier_opt SEMICOLON

  163 try_statement: TRY block catch_list FINALLY block
  164              | TRY block FINALLY block
  165              | TRY block catch_list

  166 catch_list: catch_clause
  167           | catch_list catch_clause

  168 @1: ε

  169 catch_clause: CATCH @1 LP type_specifier IDENTIFIER RP block

  170 throw_statement: THROW expression SEMICOLON
  171                | THROW SEMICOLON

  172 declaration_statement: type_specifier IDENTIFIER SEMICOLON
  173                      | type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON
  174                      | FINAL type_specifier IDENTIFIER SEMICOLON
  175                      | FINAL type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON

  176 @2: ε

  177 block: LC @2 statement_list RC
  178      | LC RC

  179 $@3: ε

  180 class_definition: class_or_interface IDENTIFIER extends LC $@3 member_declaration_list RC

  181 $@4: ε

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@4 member_declaration_list RC

  183 $@5: ε

  184 class_definition: class_or_interface IDENTIFIER extends LC $@5 RC

  185 $@6: ε

  186 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@6 RC

  187 class_or_member_modifier_list: class_or_member_modifier
  188                              | class_or_member_modifier_list class_or_member_modifier

  189 class_or_member_modifier: access_modifier
  190                         | VIRTUAL_T
  191                         | OVERRIDE_T
  192                         | ABSTRACT_T

  193 class_or_interface: CLASS_T
  194                   | INTERFACE_T

  195 extends: ε
  196        | COLON extends_list

  197 extends_list: IDENTIFIER
  198             | extends_list COMMA IDENTIFIER

  199 member_declaration_list: member_declaration
  200                        | member_declaration_list member_declaration

  201 member_declaration: method_member
  202                   | field_member

  203 method_member: method_function_definition
  204              | class_or_member_modifier_list method_function_definition
  205              | constructor_definition
  206              | class_or_member_modifier_list constructor_definition

  207 method_function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause block
  208                           | type_specifier IDENTIFIER LP RP throws_clause block
  209                           | type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier IDENTIFIER LP RP throws_clause SEMICOLON

  211 throws_clause: ε
  212              | THROWS exception_list

  213 exception_list: IDENTIFIER
  214               | exception_list COMMA IDENTIFIER

  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause block
  216                       | CONSTRUCTOR IDENTIFIER LP RP throws_clause block
  217                       | CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  218                       | CONSTRUCTOR IDENTIFIER LP RP throws_clause SEMICOLON

  219 access_modifier: PUBLIC_T
  220                | PRIVATE_T

  221 initializer_opt: ε
  222                | ASSIGN_T expression

  223 field_member: type_specifier IDENTIFIER initializer_opt SEMICOLON
  224             | class_or_member_modifier_list type_specifier IDENTIFIER initializer_opt SEMICOLON
  225             | FINAL type_specifier IDENTIFIER initializer_opt SEMICOLON
  226             | class_or_member_modifier_list FINAL type_specifier IDENTIFIER initializer_opt SEMICOLON

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  228                    | DELEGATE type_specifier IDENTIFIER LP RP throws_clause SEMICOLON

  229 enum_definition: ENUM IDENTIFIER LC enumerator_list RC
  230                | ENUM IDENTIFIER LC enumerator_list COMMA RC

  231 enumerator_list: IDENTIFIER
  232                | enumerator_list COMMA IDENTIFIER

  233 const_definition: CONST IDENTIFIER ASSIGN_T expression SEMICOLON
  234                 | CONST type_specifier IDENTIFIER SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LITERAL <expression> (258) 94
    DOUBLE_LITERAL <expression> (259) 95
    STRING_LITERAL <expression> (260) 96
    REGEXP_LITERAL <expression> (261) 97
    IDENTIFIER <identifier> (262) 10 11 14 27 29 34 35 36 37 38 39 86 88 89 104 105 106 107 143 155 160 169 172 173 174 175 180 182 184 186 197 198 207 208 209 210 213 214 215 216 217 218 223 224 225 226 227 228 229 230 231 232 233 234
    IF (263) 135 136 137 138
    ELSE (264) 136 138
    ELSIF (265) 141
    SWITCH (266) 144
    CASE (267) 147
    DEFAULT_T (268) 149
    WHILE (269) 152 154
    DO_T (270) 154
    FOR (271) 153
    FOREACH (272) 155
    RETURN_T (273) 158
    BREAK (274) 161
    CONTINUE (275) 162
    NULL_T (276) 100
    LP (277) 34 35 36 37 90 91 92 104 105 106 107 135 136 137 138 141 144 152 153 154 155 169 207 208 209 210 215 216 217 218 227 228
    RP (278) 34 35 36 37 90 91 92 104 105 106 107 135 136 137 138 141 144 152 153 154 155 169 207 208 209 210 215 216 217 218 227 228
    LC (279) 108 109 110 177 178 180 182 184 186 229 230
    RC (280) 108 109 110 177 178 180 182 184 186 229 230
    LB (281) 28 29 30 87 88 117 118 119
    RB (282) 28 29 30 87 88 117 118 119
    SEMICOLON (283) 9 14 36 37 122 153 154 158 161 162 170 171 172 173 174 175 209 210 217 218 223 224 225 226 227 228 233 234
    COLON (284) 143 155 196
    COMMA (285) 39 41 45 110 121 151 198 214 230 232
    ASSIGN_T (286) 48 173 175 222 233
    LOGICAL_AND (287) 57
    LOGICAL_OR (288) 55
    EQ (289) 59
    NE (290) 60
    GT (291) 62
    GE (292) 63
    LT (293) 64
    LE (294) 65
    ADD (295) 67
    SUB (296) 68 77
    MUL (297) 70
    DIV (298) 71
    MOD (299) 72
    BIT_AND (300) 73
    BIT_OR (301) 74
    BIT_XOR (302) 75
    BIT_NOT (303) 79
    TRUE_T (304) 98
    FALSE_T (305) 99
    EXCLAMATION (306) 78
    DOT (307) 11 89 106 107
    ADD_ASSIGN_T (308) 49
    SUB_ASSIGN_T (309) 50
    MUL_ASSIGN_T (310) 51
    DIV_ASSIGN_T (311) 52
    MOD_ASSIGN_T (312) 53
    INCREMENT (313) 81
    DECREMENT (314) 82
    TRY (315) 163 164 165
    CATCH (316) 169
    FINALLY (317) 163 164
    THROW (318) 170 171
    THROWS (319) 212
    VOID_T (320) 21
    BOOLEAN_T (321) 22
    INT_T (322) 23
    DOUBLE_T (323) 24
    STRING_T (324) 25
    NATIVE_POINTER_T (325) 26
    NEW (326) 104 105 106 107 111 112 113 114
    REQUIRE (327) 9
    RENAME (328) 14
    CLASS_T (329) 193
    INTERFACE_T (330) 194
    PUBLIC_T (331) 219
    PRIVATE_T (332) 220
    VIRTUAL_T (333) 190
    OVERRIDE_T (334) 191
    ABSTRACT_T (335) 192
    THIS_T (336) 102
    SUPER_T (337) 103
    CONSTRUCTOR (338) 215 216 217 218
    INSTANCEOF (339) 83
    DOWN_CAST_BEGIN (340) 93
    DOWN_CAST_END (341) 93
    DELEGATE (342) 227 228
    FINAL (343) 174 175 225 226
    ENUM (344) 229 230
    CONST (345) 233 234


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    translation_unit (92)
        on left: 1 2
        on right: 0 2
    initial_declaration (93)
        on left: 3 4 5 6
        on right: 1
    require_list <require_list> (94)
        on left: 7 8
        on right: 4 5 8
    require_declaration <require_list> (95)
        on left: 9
        on right: 7 8
    package_name <package_name> (96)
        on left: 10 11
        on right: 9 11 14
    rename_list <rename_list> (97)
        on left: 12 13
        on right: 4 6 13
    rename_declaration <rename_list> (98)
        on left: 14
        on right: 12 13
    definition_or_statement (99)
        on left: 15 16 17 18 19 20
        on right: 1 2
    basic_type_specifier <basic_type_specifier> (100)
        on left: 21 22 23 24 25 26
        on right: 28 31 111 112
    identifier_type_specifier <type_specifier> (101)
        on left: 27
        on right: 33 113 114
    array_type_specifier <type_specifier> (102)
        on left: 28 29 30
        on right: 30 32
    type_specifier <type_specifier> (103)
        on left: 31 32 33
        on right: 34 35 36 37 38 39 83 93 169 172 173 174 175 207 208 209 210 223 224 225 226 227 228 234
    function_definition (104)
        on left: 34 35 36 37
        on right: 15
    parameter_list <parameter_list> (105)
        on left: 38 39
        on right: 34 36 39 207 209 215 217 227
    argument_list <argument_list> (106)
        on left: 40 41
        on right: 41 90 105 107
    statement_list <statement_list> (107)
        on left: 42 43
        on right: 43 177
    expression <expression> (108)
        on left: 44 45
        on right: 45 87 88 92 117 122 135 136 137 138 141 144 152 154 155 157 170 173 175 222 233
    assignment_expression <expression> (109)
        on left: 46 47
        on right: 40 41 44 45 47 120 121 150 151
    assignment_operator <assignment_operator> (110)
        on left: 48 49 50 51 52 53
        on right: 47
    logical_or_expression <expression> (111)
        on left: 54 55
        on right: 46 55
    logical_and_expression <expression> (112)
        on left: 56 57
        on right: 54 55 57
    equality_expression <expression> (113)
        on left: 58 59 60
        on right: 56 57 59 60
    relational_expression <expression> (114)
        on left: 61 62 63 64 65
        on right: 58 59 60 62 63 64 65
    additive_expression <expression> (115)
        on left: 66 67 68
        on right: 61 62 63 64 65 67 68
    multiplicative_expression <expression> (116)
        on left: 69 70 71 72 73 74 75
        on right: 66 67 68 70 71 72 73 74 75
    unary_expression <expression> (117)
        on left: 76 77 78 79
        on right: 69 70 71 72 73 74 75 77 78 79
    postfix_expression <expression> (118)
        on left: 80 81 82 83
        on right: 76
    primary_expression <expression> (119)
        on left: 84 85 86
        on right: 47 80 81 82 83 89 90 91 93
    primary_no_new_array <expression> (120)
        on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
        on right: 84 87
    array_literal <expression> (121)
        on left: 108 109 110
        on right: 101
    array_creation <expression> (122)
        on left: 111 112 113 114
        on right: 85
    dimension_expression_list <array_dimension> (123)
        on left: 115 116
        on right: 111 112 113 114 116
    dimension_expression <array_dimension> (124)
        on left: 117
        on right: 115 116
    dimension_list <array_dimension> (125)
        on left: 118 119
        on right: 112 114 119
    expression_list <expression_list> (126)
        on left: 120 121
        on right: 109 110 121 151
    statement <statement> (127)
        on left: 122 123 124 125 126 127 128 129 130 131 132 133 134
        on right: 17 42 43
    if_statement <statement> (128)
        on left: 135 136 137 138
        on right: 123
    elsif_list <elsif> (129)
        on left: 139 140
        on right: 137 138 140
    elsif <elsif> (130)
        on left: 141
        on right: 139 140
    label_opt <identifier> (131)
        on left: 142 143
        on right: 152 153 154 155
    switch_statement <statement> (132)
        on left: 144
        on right: 124
    case_list <case_list> (133)
        on left: 145 146
        on right: 144 146
    one_case <case_list> (134)
        on left: 147
        on right: 145 146
    default_opt <block> (135)
        on left: 148 149
        on right: 144
    case_expression_list <expression_list> (136)
        on left: 150 151
        on right: 147
    while_statement <statement> (137)
        on left: 152
        on right: 125
    for_statement <statement> (138)
        on left: 153
        on right: 126
    do_while_statement <statement> (139)
        on left: 154
        on right: 127
    foreach_statement <statement> (140)
        on left: 155
        on right: 128
    expression_opt <expression> (141)
        on left: 156 157
        on right: 153 158
    return_statement <statement> (142)
        on left: 158
        on right: 129
    identifier_opt <identifier> (143)
        on left: 159 160
        on right: 161 162
    break_statement <statement> (144)
        on left: 161
        on right: 130
    continue_statement <statement> (145)
        on left: 162
        on right: 131
    try_statement <statement> (146)
        on left: 163 164 165
        on right: 132
    catch_list <catch_clause> (147)
        on left: 166 167
        on right: 163 165 167
    catch_clause <catch_clause> (148)
        on left: 169
        on right: 166 167
    @1 (149)
        on left: 168
        on right: 169
    throw_statement <statement> (150)
        on left: 170 171
        on right: 133
    declaration_statement <statement> (151)
        on left: 172 173 174 175
        on right: 134
    block <block> (152)
        on left: 177 178
        on right: 34 35 135 136 137 138 141 147 149 152 153 154 155 163 164 165 169 207 208 215 216
    @2 (153)
        on left: 176
        on right: 177
    class_definition (154)
        on left: 180 182 184 186
        on right: 16
    $@3 (155)
        on left: 179
        on right: 180
    $@4 (156)
        on left: 181
        on right: 182
    $@5 (157)
        on left: 183
        on right: 184
    $@6 (158)
        on left: 185
        on right: 186
    class_or_member_modifier_list <class_or_member_modifier> (159)
        on left: 187 188
        on right: 182 186 188 204 206 224 226
    class_or_member_modifier <class_or_member_modifier> (160)
        on left: 189 190 191 192
        on right: 187 188
    class_or_interface <class_or_interface> (161)
        on left: 193 194
        on right: 180 182 184 186
    extends <extends_list> (162)
        on left: 195 196
        on right: 180 182 184 186
    extends_list <extends_list> (163)
        on left: 197 198
        on right: 196 198
    member_declaration_list <member_declaration> (164)
        on left: 199 200
        on right: 180 182 200
    member_declaration <member_declaration> (165)
        on left: 201 202
        on right: 199 200
    method_member <member_declaration> (166)
        on left: 203 204 205 206
        on right: 201
    method_function_definition <function_definition> (167)
        on left: 207 208 209 210
        on right: 203 204
    throws_clause <exception_list> (168)
        on left: 211 212
        on right: 34 35 36 37 207 208 209 210 215 216 217 218 227 228
    exception_list <exception_list> (169)
        on left: 213 214
        on right: 212 214
    constructor_definition <function_definition> (170)
        on left: 215 216 217 218
        on right: 205 206
    access_modifier <class_or_member_modifier> (171)
        on left: 219 220
        on right: 189
    initializer_opt <expression> (172)
        on left: 221 222
        on right: 223 224 225 226
    field_member <member_declaration> (173)
        on left: 223 224 225 226
        on right: 202
    delegate_definition (174)
        on left: 227 228
        on right: 18
    enum_definition (175)
        on left: 229 230
        on right: 19
    enumerator_list <enumerator> (176)
        on left: 231 232
        on right: 229 230 232
    const_definition (177)
        on left: 233 234
        on right: 20


State 0

    0 $accept: • translation_unit $end

    REQUIRE  shift, and go to state 1
    RENAME   shift, and go to state 2

    $default  reduce using rule 3 (initial_declaration)

    translation_unit     go to state 3
    initial_declaration  go to state 4
    require_list         go to state 5
    require_declaration  go to state 6
    rename_list          go to state 7
    rename_declaration   go to state 8


State 1

    9 require_declaration: REQUIRE • package_name SEMICOLON

    IDENTIFIER  shift, and go to state 9

    package_name  go to state 10


State 2

   14 rename_declaration: RENAME • package_name IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 9

    package_name  go to state 11


State 3

    0 $accept: translation_unit • $end
    2 translation_unit: translation_unit • definition_or_statement

    $end              shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    DOUBLE_LITERAL    shift, and go to state 14
    STRING_LITERAL    shift, and go to state 15
    REGEXP_LITERAL    shift, and go to state 16
    IDENTIFIER        shift, and go to state 17
    IF                shift, and go to state 18
    SWITCH            shift, and go to state 19
    RETURN_T          shift, and go to state 20
    BREAK             shift, and go to state 21
    CONTINUE          shift, and go to state 22
    NULL_T            shift, and go to state 23
    LP                shift, and go to state 24
    LC                shift, and go to state 25
    SUB               shift, and go to state 26
    BIT_NOT           shift, and go to state 27
    TRUE_T            shift, and go to state 28
    FALSE_T           shift, and go to state 29
    EXCLAMATION       shift, and go to state 30
    TRY               shift, and go to state 31
    THROW             shift, and go to state 32
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    NEW               shift, and go to state 39
    CLASS_T           shift, and go to state 40
    INTERFACE_T       shift, and go to state 41
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    THIS_T            shift, and go to state 47
    SUPER_T           shift, and go to state 48
    DELEGATE          shift, and go to state 49
    FINAL             shift, and go to state 50
    ENUM              shift, and go to state 51
    CONST             shift, and go to state 52

    $default  reduce using rule 142 (label_opt)

    definition_or_statement        go to state 53
    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 57
    function_definition            go to state 58
    expression                     go to state 59
    assignment_expression          go to state 60
    logical_or_expression          go to state 61
    logical_and_expression         go to state 62
    equality_expression            go to state 63
    relational_expression          go to state 64
    additive_expression            go to state 65
    multiplicative_expression      go to state 66
    unary_expression               go to state 67
    postfix_expression             go to state 68
    primary_expression             go to state 69
    primary_no_new_array           go to state 70
    array_literal                  go to state 71
    array_creation                 go to state 72
    statement                      go to state 73
    if_statement                   go to state 74
    label_opt                      go to state 75
    switch_statement               go to state 76
    while_statement                go to state 77
    for_statement                  go to state 78
    do_while_statement             go to state 79
    foreach_statement              go to state 80
    return_statement               go to state 81
    break_statement                go to state 82
    continue_statement             go to state 83
    try_statement                  go to state 84
    throw_statement                go to state 85
    declaration_statement          go to state 86
    class_definition               go to state 87
    class_or_member_modifier_list  go to state 88
    class_or_member_modifier       go to state 89
    class_or_interface             go to state 90
    access_modifier                go to state 91
    delegate_definition            go to state 92
    enum_definition                go to state 93
    const_definition               go to state 94


State 4

    1 translation_unit: initial_declaration • definition_or_statement

    INT_LITERAL       shift, and go to state 13
    DOUBLE_LITERAL    shift, and go to state 14
    STRING_LITERAL    shift, and go to state 15
    REGEXP_LITERAL    shift, and go to state 16
    IDENTIFIER        shift, and go to state 17
    IF                shift, and go to state 18
    SWITCH            shift, and go to state 19
    RETURN_T          shift, and go to state 20
    BREAK             shift, and go to state 21
    CONTINUE          shift, and go to state 22
    NULL_T            shift, and go to state 23
    LP                shift, and go to state 24
    LC                shift, and go to state 25
    SUB               shift, and go to state 26
    BIT_NOT           shift, and go to state 27
    TRUE_T            shift, and go to state 28
    FALSE_T           shift, and go to state 29
    EXCLAMATION       shift, and go to state 30
    TRY               shift, and go to state 31
    THROW             shift, and go to state 32
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    NEW               shift, and go to state 39
    CLASS_T           shift, and go to state 40
    INTERFACE_T       shift, and go to state 41
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    THIS_T            shift, and go to state 47
    SUPER_T           shift, and go to state 48
    DELEGATE          shift, and go to state 49
    FINAL             shift, and go to state 50
    ENUM              shift, and go to state 51
    CONST             shift, and go to state 52

    $default  reduce using rule 142 (label_opt)

    definition_or_statement        go to state 95
    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 57
    function_definition            go to state 58
    expression                     go to state 59
    assignment_expression          go to state 60
    logical_or_expression          go to state 61
    logical_and_expression         go to state 62
    equality_expression            go to state 63
    relational_expression          go to state 64
    additive_expression            go to state 65
    multiplicative_expression      go to state 66
    unary_expression               go to state 67
    postfix_expression             go to state 68
    primary_expression             go to state 69
    primary_no_new_array           go to state 70
    array_literal                  go to state 71
    array_creation                 go to state 72
    statement                      go to state 73
    if_statement                   go to state 74
    label_opt                      go to state 75
    switch_statement               go to state 76
    while_statement                go to state 77
    for_statement                  go to state 78
    do_while_statement             go to state 79
    foreach_statement              go to state 80
    return_statement               go to state 81
    break_statement                go to state 82
    continue_statement             go to state 83
    try_statement                  go to state 84
    throw_statement                go to state 85
    declaration_statement          go to state 86
    class_definition               go to state 87
    class_or_member_modifier_list  go to state 88
    class_or_member_modifier       go to state 89
    class_or_interface             go to state 90
    access_modifier                go to state 91
    delegate_definition            go to state 92
    enum_definition                go to state 93
    const_definition               go to state 94


State 5

    4 initial_declaration: require_list • rename_list
    5                    | require_list •
    8 require_list: require_list • require_declaration

    REQUIRE  shift, and go to state 1
    RENAME   shift, and go to state 2

    $default  reduce using rule 5 (initial_declaration)

    require_declaration  go to state 96
    rename_list          go to state 97
    rename_declaration   go to state 8


State 6

    7 require_list: require_declaration •

    $default  reduce using rule 7 (require_list)


State 7

    6 initial_declaration: rename_list •
   13 rename_list: rename_list • rename_declaration

    RENAME  shift, and go to state 2

    $default  reduce using rule 6 (initial_declaration)

    rename_declaration  go to state 98


State 8

   12 rename_list: rename_declaration •

    $default  reduce using rule 12 (rename_list)


State 9

   10 package_name: IDENTIFIER •

    $default  reduce using rule 10 (package_name)


State 10

    9 require_declaration: REQUIRE package_name • SEMICOLON
   11 package_name: package_name • DOT IDENTIFIER

    SEMICOLON  shift, and go to state 99
    DOT        shift, and go to state 100


State 11

   11 package_name: package_name • DOT IDENTIFIER
   14 rename_declaration: RENAME package_name • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 101
    DOT         shift, and go to state 100


State 12

    0 $accept: translation_unit $end •

    $default  accept


State 13

   94 primary_no_new_array: INT_LITERAL •

    $default  reduce using rule 94 (primary_no_new_array)


State 14

   95 primary_no_new_array: DOUBLE_LITERAL •

    $default  reduce using rule 95 (primary_no_new_array)


State 15

   96 primary_no_new_array: STRING_LITERAL •

    $default  reduce using rule 96 (primary_no_new_array)


State 16

   97 primary_no_new_array: REGEXP_LITERAL •

    $default  reduce using rule 97 (primary_no_new_array)


State 17

   27 identifier_type_specifier: IDENTIFIER •
   29 array_type_specifier: IDENTIFIER • LB RB
   86 primary_expression: IDENTIFIER •
   88 primary_no_new_array: IDENTIFIER • LB expression RB
  143 label_opt: IDENTIFIER • COLON

    LB     shift, and go to state 102
    COLON  shift, and go to state 103

    IDENTIFIER  reduce using rule 27 (identifier_type_specifier)
    $default    reduce using rule 86 (primary_expression)


State 18

  135 if_statement: IF • LP expression RP block
  136             | IF • LP expression RP block ELSE block
  137             | IF • LP expression RP block elsif_list
  138             | IF • LP expression RP block elsif_list ELSE block

    LP  shift, and go to state 104


State 19

  144 switch_statement: SWITCH • LP expression RP case_list default_opt

    LP  shift, and go to state 105


State 20

  158 return_statement: RETURN_T • expression_opt SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    $default  reduce using rule 156 (expression_opt)

    expression                 go to state 107
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_opt             go to state 108


State 21

  161 break_statement: BREAK • identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 109

    $default  reduce using rule 159 (identifier_opt)

    identifier_opt  go to state 110


State 22

  162 continue_statement: CONTINUE • identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 109

    $default  reduce using rule 159 (identifier_opt)

    identifier_opt  go to state 111


State 23

  100 primary_no_new_array: NULL_T •

    $default  reduce using rule 100 (primary_no_new_array)


State 24

   92 primary_no_new_array: LP • expression RP

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 112
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 25

  108 array_literal: LC • RC
  109              | LC • expression_list RC
  110              | LC • expression_list COMMA RC

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    RC              shift, and go to state 113
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 114
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_list            go to state 115


State 26

   77 unary_expression: SUB • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 116
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 27

   79 unary_expression: BIT_NOT • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 118
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 28

   98 primary_no_new_array: TRUE_T •

    $default  reduce using rule 98 (primary_no_new_array)


State 29

   99 primary_no_new_array: FALSE_T •

    $default  reduce using rule 99 (primary_no_new_array)


State 30

   78 unary_expression: EXCLAMATION • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 119
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 31

  163 try_statement: TRY • block catch_list FINALLY block
  164              | TRY • block FINALLY block
  165              | TRY • block catch_list

    LC  shift, and go to state 120

    block  go to state 121


State 32

  170 throw_statement: THROW • expression SEMICOLON
  171                | THROW • SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SEMICOLON       shift, and go to state 122
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 123
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 33

   21 basic_type_specifier: VOID_T •

    $default  reduce using rule 21 (basic_type_specifier)


State 34

   22 basic_type_specifier: BOOLEAN_T •

    $default  reduce using rule 22 (basic_type_specifier)


State 35

   23 basic_type_specifier: INT_T •

    $default  reduce using rule 23 (basic_type_specifier)


State 36

   24 basic_type_specifier: DOUBLE_T •

    $default  reduce using rule 24 (basic_type_specifier)


State 37

   25 basic_type_specifier: STRING_T •

    $default  reduce using rule 25 (basic_type_specifier)


State 38

   26 basic_type_specifier: NATIVE_POINTER_T •

    $default  reduce using rule 26 (basic_type_specifier)


State 39

  104 primary_no_new_array: NEW • IDENTIFIER LP RP
  105                     | NEW • IDENTIFIER LP argument_list RP
  106                     | NEW • IDENTIFIER DOT IDENTIFIER LP RP
  107                     | NEW • IDENTIFIER DOT IDENTIFIER LP argument_list RP
  111 array_creation: NEW • basic_type_specifier dimension_expression_list
  112               | NEW • basic_type_specifier dimension_expression_list dimension_list
  113               | NEW • identifier_type_specifier dimension_expression_list
  114               | NEW • identifier_type_specifier dimension_expression_list dimension_list

    IDENTIFIER        shift, and go to state 124
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 125
    identifier_type_specifier  go to state 126


State 40

  193 class_or_interface: CLASS_T •

    $default  reduce using rule 193 (class_or_interface)


State 41

  194 class_or_interface: INTERFACE_T •

    $default  reduce using rule 194 (class_or_interface)


State 42

  219 access_modifier: PUBLIC_T •

    $default  reduce using rule 219 (access_modifier)


State 43

  220 access_modifier: PRIVATE_T •

    $default  reduce using rule 220 (access_modifier)


State 44

  190 class_or_member_modifier: VIRTUAL_T •

    $default  reduce using rule 190 (class_or_member_modifier)


State 45

  191 class_or_member_modifier: OVERRIDE_T •

    $default  reduce using rule 191 (class_or_member_modifier)


State 46

  192 class_or_member_modifier: ABSTRACT_T •

    $default  reduce using rule 192 (class_or_member_modifier)


State 47

  102 primary_no_new_array: THIS_T •

    $default  reduce using rule 102 (primary_no_new_array)


State 48

  103 primary_no_new_array: SUPER_T •

    $default  reduce using rule 103 (primary_no_new_array)


State 49

  227 delegate_definition: DELEGATE • type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  228                    | DELEGATE • type_specifier IDENTIFIER LP RP throws_clause SEMICOLON

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 128


State 50

  174 declaration_statement: FINAL • type_specifier IDENTIFIER SEMICOLON
  175                      | FINAL • type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 129


State 51

  229 enum_definition: ENUM • IDENTIFIER LC enumerator_list RC
  230                | ENUM • IDENTIFIER LC enumerator_list COMMA RC

    IDENTIFIER  shift, and go to state 130


State 52

  233 const_definition: CONST • IDENTIFIER ASSIGN_T expression SEMICOLON
  234                 | CONST • type_specifier IDENTIFIER SEMICOLON

    IDENTIFIER        shift, and go to state 131
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 132


State 53

    2 translation_unit: translation_unit definition_or_statement •

    $default  reduce using rule 2 (translation_unit)


State 54

   28 array_type_specifier: basic_type_specifier • LB RB
   31 type_specifier: basic_type_specifier •

    LB  shift, and go to state 133

    $default  reduce using rule 31 (type_specifier)


State 55

   33 type_specifier: identifier_type_specifier •

    $default  reduce using rule 33 (type_specifier)


State 56

   30 array_type_specifier: array_type_specifier • LB RB
   32 type_specifier: array_type_specifier •

    LB  shift, and go to state 134

    $default  reduce using rule 32 (type_specifier)


State 57

   34 function_definition: type_specifier • IDENTIFIER LP parameter_list RP throws_clause block
   35                    | type_specifier • IDENTIFIER LP RP throws_clause block
   36                    | type_specifier • IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
   37                    | type_specifier • IDENTIFIER LP RP throws_clause SEMICOLON
  172 declaration_statement: type_specifier • IDENTIFIER SEMICOLON
  173                      | type_specifier • IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 135


State 58

   15 definition_or_statement: function_definition •

    $default  reduce using rule 15 (definition_or_statement)


State 59

   45 expression: expression • COMMA assignment_expression
  122 statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 136
    COMMA      shift, and go to state 137


State 60

   44 expression: assignment_expression •

    $default  reduce using rule 44 (expression)


State 61

   46 assignment_expression: logical_or_expression •
   55 logical_or_expression: logical_or_expression • LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 138

    $default  reduce using rule 46 (assignment_expression)


State 62

   54 logical_or_expression: logical_and_expression •
   57 logical_and_expression: logical_and_expression • LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 139

    $default  reduce using rule 54 (logical_or_expression)


State 63

   56 logical_and_expression: equality_expression •
   59 equality_expression: equality_expression • EQ relational_expression
   60                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 140
    NE  shift, and go to state 141

    $default  reduce using rule 56 (logical_and_expression)


State 64

   58 equality_expression: relational_expression •
   62 relational_expression: relational_expression • GT additive_expression
   63                      | relational_expression • GE additive_expression
   64                      | relational_expression • LT additive_expression
   65                      | relational_expression • LE additive_expression

    GT  shift, and go to state 142
    GE  shift, and go to state 143
    LT  shift, and go to state 144
    LE  shift, and go to state 145

    $default  reduce using rule 58 (equality_expression)


State 65

   61 relational_expression: additive_expression •
   67 additive_expression: additive_expression • ADD multiplicative_expression
   68                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 146
    SUB  shift, and go to state 147

    $default  reduce using rule 61 (relational_expression)


State 66

   66 additive_expression: multiplicative_expression •
   70 multiplicative_expression: multiplicative_expression • MUL unary_expression
   71                          | multiplicative_expression • DIV unary_expression
   72                          | multiplicative_expression • MOD unary_expression
   73                          | multiplicative_expression • BIT_AND unary_expression
   74                          | multiplicative_expression • BIT_OR unary_expression
   75                          | multiplicative_expression • BIT_XOR unary_expression

    MUL      shift, and go to state 148
    DIV      shift, and go to state 149
    MOD      shift, and go to state 150
    BIT_AND  shift, and go to state 151
    BIT_OR   shift, and go to state 152
    BIT_XOR  shift, and go to state 153

    $default  reduce using rule 66 (additive_expression)


State 67

   69 multiplicative_expression: unary_expression •

    $default  reduce using rule 69 (multiplicative_expression)


State 68

   76 unary_expression: postfix_expression •

    $default  reduce using rule 76 (unary_expression)


State 69

   47 assignment_expression: primary_expression • assignment_operator assignment_expression
   80 postfix_expression: primary_expression •
   81                   | primary_expression • INCREMENT
   82                   | primary_expression • DECREMENT
   83                   | primary_expression • INSTANCEOF type_specifier
   89 primary_no_new_array: primary_expression • DOT IDENTIFIER
   90                     | primary_expression • LP argument_list RP
   91                     | primary_expression • LP RP
   93                     | primary_expression • DOWN_CAST_BEGIN type_specifier DOWN_CAST_END

    LP               shift, and go to state 154
    ASSIGN_T         shift, and go to state 155
    DOT              shift, and go to state 156
    ADD_ASSIGN_T     shift, and go to state 157
    SUB_ASSIGN_T     shift, and go to state 158
    MUL_ASSIGN_T     shift, and go to state 159
    DIV_ASSIGN_T     shift, and go to state 160
    MOD_ASSIGN_T     shift, and go to state 161
    INCREMENT        shift, and go to state 162
    DECREMENT        shift, and go to state 163
    INSTANCEOF       shift, and go to state 164
    DOWN_CAST_BEGIN  shift, and go to state 165

    $default  reduce using rule 80 (postfix_expression)

    assignment_operator  go to state 166


State 70

   84 primary_expression: primary_no_new_array •
   87 primary_no_new_array: primary_no_new_array • LB expression RB

    LB  shift, and go to state 167

    $default  reduce using rule 84 (primary_expression)


State 71

  101 primary_no_new_array: array_literal •

    $default  reduce using rule 101 (primary_no_new_array)


State 72

   85 primary_expression: array_creation •

    $default  reduce using rule 85 (primary_expression)


State 73

   17 definition_or_statement: statement •

    $default  reduce using rule 17 (definition_or_statement)


State 74

  123 statement: if_statement •

    $default  reduce using rule 123 (statement)


State 75

  152 while_statement: label_opt • WHILE LP expression RP block
  153 for_statement: label_opt • FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block
  154 do_while_statement: label_opt • DO_T block WHILE LP expression RP SEMICOLON
  155 foreach_statement: label_opt • FOREACH LP IDENTIFIER COLON expression RP block

    WHILE    shift, and go to state 168
    DO_T     shift, and go to state 169
    FOR      shift, and go to state 170
    FOREACH  shift, and go to state 171


State 76

  124 statement: switch_statement •

    $default  reduce using rule 124 (statement)


State 77

  125 statement: while_statement •

    $default  reduce using rule 125 (statement)


State 78

  126 statement: for_statement •

    $default  reduce using rule 126 (statement)


State 79

  127 statement: do_while_statement •

    $default  reduce using rule 127 (statement)


State 80

  128 statement: foreach_statement •

    $default  reduce using rule 128 (statement)


State 81

  129 statement: return_statement •

    $default  reduce using rule 129 (statement)


State 82

  130 statement: break_statement •

    $default  reduce using rule 130 (statement)


State 83

  131 statement: continue_statement •

    $default  reduce using rule 131 (statement)


State 84

  132 statement: try_statement •

    $default  reduce using rule 132 (statement)


State 85

  133 statement: throw_statement •

    $default  reduce using rule 133 (statement)


State 86

  134 statement: declaration_statement •

    $default  reduce using rule 134 (statement)


State 87

   16 definition_or_statement: class_definition •

    $default  reduce using rule 16 (definition_or_statement)


State 88

  182 class_definition: class_or_member_modifier_list • class_or_interface IDENTIFIER extends LC $@4 member_declaration_list RC
  186                 | class_or_member_modifier_list • class_or_interface IDENTIFIER extends LC $@6 RC
  188 class_or_member_modifier_list: class_or_member_modifier_list • class_or_member_modifier

    CLASS_T      shift, and go to state 40
    INTERFACE_T  shift, and go to state 41
    PUBLIC_T     shift, and go to state 42
    PRIVATE_T    shift, and go to state 43
    VIRTUAL_T    shift, and go to state 44
    OVERRIDE_T   shift, and go to state 45
    ABSTRACT_T   shift, and go to state 46

    class_or_member_modifier  go to state 172
    class_or_interface        go to state 173
    access_modifier           go to state 91


State 89

  187 class_or_member_modifier_list: class_or_member_modifier •

    $default  reduce using rule 187 (class_or_member_modifier_list)


State 90

  180 class_definition: class_or_interface • IDENTIFIER extends LC $@3 member_declaration_list RC
  184                 | class_or_interface • IDENTIFIER extends LC $@5 RC

    IDENTIFIER  shift, and go to state 174


State 91

  189 class_or_member_modifier: access_modifier •

    $default  reduce using rule 189 (class_or_member_modifier)


State 92

   18 definition_or_statement: delegate_definition •

    $default  reduce using rule 18 (definition_or_statement)


State 93

   19 definition_or_statement: enum_definition •

    $default  reduce using rule 19 (definition_or_statement)


State 94

   20 definition_or_statement: const_definition •

    $default  reduce using rule 20 (definition_or_statement)


State 95

    1 translation_unit: initial_declaration definition_or_statement •

    $default  reduce using rule 1 (translation_unit)


State 96

    8 require_list: require_list require_declaration •

    $default  reduce using rule 8 (require_list)


State 97

    4 initial_declaration: require_list rename_list •
   13 rename_list: rename_list • rename_declaration

    RENAME  shift, and go to state 2

    $default  reduce using rule 4 (initial_declaration)

    rename_declaration  go to state 98


State 98

   13 rename_list: rename_list rename_declaration •

    $default  reduce using rule 13 (rename_list)


State 99

    9 require_declaration: REQUIRE package_name SEMICOLON •

    $default  reduce using rule 9 (require_declaration)


State 100

   11 package_name: package_name DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 175


State 101

   14 rename_declaration: RENAME package_name IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 176


State 102

   29 array_type_specifier: IDENTIFIER LB • RB
   88 primary_no_new_array: IDENTIFIER LB • expression RB

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    RB              shift, and go to state 177
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 178
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 103

  143 label_opt: IDENTIFIER COLON •

    $default  reduce using rule 143 (label_opt)


State 104

  135 if_statement: IF LP • expression RP block
  136             | IF LP • expression RP block ELSE block
  137             | IF LP • expression RP block elsif_list
  138             | IF LP • expression RP block elsif_list ELSE block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 179
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 105

  144 switch_statement: SWITCH LP • expression RP case_list default_opt

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 180
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 106

   86 primary_expression: IDENTIFIER •
   88 primary_no_new_array: IDENTIFIER • LB expression RB

    LB  shift, and go to state 181

    $default  reduce using rule 86 (primary_expression)


State 107

   45 expression: expression • COMMA assignment_expression
  157 expression_opt: expression •

    COMMA  shift, and go to state 137

    $default  reduce using rule 157 (expression_opt)


State 108

  158 return_statement: RETURN_T expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 182


State 109

  160 identifier_opt: IDENTIFIER •

    $default  reduce using rule 160 (identifier_opt)


State 110

  161 break_statement: BREAK identifier_opt • SEMICOLON

    SEMICOLON  shift, and go to state 183


State 111

  162 continue_statement: CONTINUE identifier_opt • SEMICOLON

    SEMICOLON  shift, and go to state 184


State 112

   45 expression: expression • COMMA assignment_expression
   92 primary_no_new_array: LP expression • RP

    RP     shift, and go to state 185
    COMMA  shift, and go to state 137


State 113

  108 array_literal: LC RC •

    $default  reduce using rule 108 (array_literal)


State 114

  120 expression_list: assignment_expression •

    $default  reduce using rule 120 (expression_list)


State 115

  109 array_literal: LC expression_list • RC
  110              | LC expression_list • COMMA RC
  121 expression_list: expression_list • COMMA assignment_expression

    RC     shift, and go to state 186
    COMMA  shift, and go to state 187


State 116

   77 unary_expression: SUB unary_expression •

    $default  reduce using rule 77 (unary_expression)


State 117

   80 postfix_expression: primary_expression •
   81                   | primary_expression • INCREMENT
   82                   | primary_expression • DECREMENT
   83                   | primary_expression • INSTANCEOF type_specifier
   89 primary_no_new_array: primary_expression • DOT IDENTIFIER
   90                     | primary_expression • LP argument_list RP
   91                     | primary_expression • LP RP
   93                     | primary_expression • DOWN_CAST_BEGIN type_specifier DOWN_CAST_END

    LP               shift, and go to state 154
    DOT              shift, and go to state 156
    INCREMENT        shift, and go to state 162
    DECREMENT        shift, and go to state 163
    INSTANCEOF       shift, and go to state 164
    DOWN_CAST_BEGIN  shift, and go to state 165

    $default  reduce using rule 80 (postfix_expression)


State 118

   79 unary_expression: BIT_NOT unary_expression •

    $default  reduce using rule 79 (unary_expression)


State 119

   78 unary_expression: EXCLAMATION unary_expression •

    $default  reduce using rule 78 (unary_expression)


State 120

  177 block: LC • @2 statement_list RC
  178      | LC • RC

    RC  shift, and go to state 188

    $default  reduce using rule 176 (@2)

    @2  go to state 189


State 121

  163 try_statement: TRY block • catch_list FINALLY block
  164              | TRY block • FINALLY block
  165              | TRY block • catch_list

    CATCH    shift, and go to state 190
    FINALLY  shift, and go to state 191

    catch_list    go to state 192
    catch_clause  go to state 193


State 122

  171 throw_statement: THROW SEMICOLON •

    $default  reduce using rule 171 (throw_statement)


State 123

   45 expression: expression • COMMA assignment_expression
  170 throw_statement: THROW expression • SEMICOLON

    SEMICOLON  shift, and go to state 194
    COMMA      shift, and go to state 137


State 124

   27 identifier_type_specifier: IDENTIFIER •
  104 primary_no_new_array: NEW IDENTIFIER • LP RP
  105                     | NEW IDENTIFIER • LP argument_list RP
  106                     | NEW IDENTIFIER • DOT IDENTIFIER LP RP
  107                     | NEW IDENTIFIER • DOT IDENTIFIER LP argument_list RP

    LP   shift, and go to state 195
    DOT  shift, and go to state 196

    $default  reduce using rule 27 (identifier_type_specifier)


State 125

  111 array_creation: NEW basic_type_specifier • dimension_expression_list
  112               | NEW basic_type_specifier • dimension_expression_list dimension_list

    LB  shift, and go to state 197

    dimension_expression_list  go to state 198
    dimension_expression       go to state 199


State 126

  113 array_creation: NEW identifier_type_specifier • dimension_expression_list
  114               | NEW identifier_type_specifier • dimension_expression_list dimension_list

    LB  shift, and go to state 197

    dimension_expression_list  go to state 200
    dimension_expression       go to state 199


State 127

   27 identifier_type_specifier: IDENTIFIER •
   29 array_type_specifier: IDENTIFIER • LB RB

    LB  shift, and go to state 201

    $default  reduce using rule 27 (identifier_type_specifier)


State 128

  227 delegate_definition: DELEGATE type_specifier • IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  228                    | DELEGATE type_specifier • IDENTIFIER LP RP throws_clause SEMICOLON

    IDENTIFIER  shift, and go to state 202


State 129

  174 declaration_statement: FINAL type_specifier • IDENTIFIER SEMICOLON
  175                      | FINAL type_specifier • IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 203


State 130

  229 enum_definition: ENUM IDENTIFIER • LC enumerator_list RC
  230                | ENUM IDENTIFIER • LC enumerator_list COMMA RC

    LC  shift, and go to state 204


State 131

   27 identifier_type_specifier: IDENTIFIER •
   29 array_type_specifier: IDENTIFIER • LB RB
  233 const_definition: CONST IDENTIFIER • ASSIGN_T expression SEMICOLON

    LB        shift, and go to state 201
    ASSIGN_T  shift, and go to state 205

    $default  reduce using rule 27 (identifier_type_specifier)


State 132

  234 const_definition: CONST type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 206


State 133

   28 array_type_specifier: basic_type_specifier LB • RB

    RB  shift, and go to state 207


State 134

   30 array_type_specifier: array_type_specifier LB • RB

    RB  shift, and go to state 208


State 135

   34 function_definition: type_specifier IDENTIFIER • LP parameter_list RP throws_clause block
   35                    | type_specifier IDENTIFIER • LP RP throws_clause block
   36                    | type_specifier IDENTIFIER • LP parameter_list RP throws_clause SEMICOLON
   37                    | type_specifier IDENTIFIER • LP RP throws_clause SEMICOLON
  172 declaration_statement: type_specifier IDENTIFIER • SEMICOLON
  173                      | type_specifier IDENTIFIER • ASSIGN_T expression SEMICOLON

    LP         shift, and go to state 209
    SEMICOLON  shift, and go to state 210
    ASSIGN_T   shift, and go to state 211


State 136

  122 statement: expression SEMICOLON •

    $default  reduce using rule 122 (statement)


State 137

   45 expression: expression COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 212
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 138

   55 logical_or_expression: logical_or_expression LOGICAL_OR • logical_and_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    logical_and_expression     go to state 213
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 139

   57 logical_and_expression: logical_and_expression LOGICAL_AND • equality_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    equality_expression        go to state 214
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 140

   59 equality_expression: equality_expression EQ • relational_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    relational_expression      go to state 215
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 141

   60 equality_expression: equality_expression NE • relational_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    relational_expression      go to state 216
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 142

   62 relational_expression: relational_expression GT • additive_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    additive_expression        go to state 217
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 143

   63 relational_expression: relational_expression GE • additive_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    additive_expression        go to state 218
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 144

   64 relational_expression: relational_expression LT • additive_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    additive_expression        go to state 219
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 145

   65 relational_expression: relational_expression LE • additive_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    additive_expression        go to state 220
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 146

   67 additive_expression: additive_expression ADD • multiplicative_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    multiplicative_expression  go to state 221
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 147

   68 additive_expression: additive_expression SUB • multiplicative_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    multiplicative_expression  go to state 222
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 117
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 148

   70 multiplicative_expression: multiplicative_expression MUL • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 223
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 149

   71 multiplicative_expression: multiplicative_expression DIV • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 224
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 150

   72 multiplicative_expression: multiplicative_expression MOD • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 225
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 151

   73 multiplicative_expression: multiplicative_expression BIT_AND • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 226
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 152

   74 multiplicative_expression: multiplicative_expression BIT_OR • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 227
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 153

   75 multiplicative_expression: multiplicative_expression BIT_XOR • unary_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    unary_expression      go to state 228
    postfix_expression    go to state 68
    primary_expression    go to state 117
    primary_no_new_array  go to state 70
    array_literal         go to state 71
    array_creation        go to state 72


State 154

   90 primary_no_new_array: primary_expression LP • argument_list RP
   91                     | primary_expression LP • RP

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    RP              shift, and go to state 229
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    argument_list              go to state 230
    assignment_expression      go to state 231
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 155

   48 assignment_operator: ASSIGN_T •

    $default  reduce using rule 48 (assignment_operator)


State 156

   89 primary_no_new_array: primary_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 232


State 157

   49 assignment_operator: ADD_ASSIGN_T •

    $default  reduce using rule 49 (assignment_operator)


State 158

   50 assignment_operator: SUB_ASSIGN_T •

    $default  reduce using rule 50 (assignment_operator)


State 159

   51 assignment_operator: MUL_ASSIGN_T •

    $default  reduce using rule 51 (assignment_operator)


State 160

   52 assignment_operator: DIV_ASSIGN_T •

    $default  reduce using rule 52 (assignment_operator)


State 161

   53 assignment_operator: MOD_ASSIGN_T •

    $default  reduce using rule 53 (assignment_operator)


State 162

   81 postfix_expression: primary_expression INCREMENT •

    $default  reduce using rule 81 (postfix_expression)


State 163

   82 postfix_expression: primary_expression DECREMENT •

    $default  reduce using rule 82 (postfix_expression)


State 164

   83 postfix_expression: primary_expression INSTANCEOF • type_specifier

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 233


State 165

   93 primary_no_new_array: primary_expression DOWN_CAST_BEGIN • type_specifier DOWN_CAST_END

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 234


State 166

   47 assignment_expression: primary_expression assignment_operator • assignment_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 235
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 167

   87 primary_no_new_array: primary_no_new_array LB • expression RB

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 236
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 168

  152 while_statement: label_opt WHILE • LP expression RP block

    LP  shift, and go to state 237


State 169

  154 do_while_statement: label_opt DO_T • block WHILE LP expression RP SEMICOLON

    LC  shift, and go to state 120

    block  go to state 238


State 170

  153 for_statement: label_opt FOR • LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    LP  shift, and go to state 239


State 171

  155 foreach_statement: label_opt FOREACH • LP IDENTIFIER COLON expression RP block

    LP  shift, and go to state 240


State 172

  188 class_or_member_modifier_list: class_or_member_modifier_list class_or_member_modifier •

    $default  reduce using rule 188 (class_or_member_modifier_list)


State 173

  182 class_definition: class_or_member_modifier_list class_or_interface • IDENTIFIER extends LC $@4 member_declaration_list RC
  186                 | class_or_member_modifier_list class_or_interface • IDENTIFIER extends LC $@6 RC

    IDENTIFIER  shift, and go to state 241


State 174

  180 class_definition: class_or_interface IDENTIFIER • extends LC $@3 member_declaration_list RC
  184                 | class_or_interface IDENTIFIER • extends LC $@5 RC

    COLON  shift, and go to state 242

    $default  reduce using rule 195 (extends)

    extends  go to state 243


State 175

   11 package_name: package_name DOT IDENTIFIER •

    $default  reduce using rule 11 (package_name)


State 176

   14 rename_declaration: RENAME package_name IDENTIFIER SEMICOLON •

    $default  reduce using rule 14 (rename_declaration)


State 177

   29 array_type_specifier: IDENTIFIER LB RB •

    $default  reduce using rule 29 (array_type_specifier)


State 178

   45 expression: expression • COMMA assignment_expression
   88 primary_no_new_array: IDENTIFIER LB expression • RB

    RB     shift, and go to state 244
    COMMA  shift, and go to state 137


State 179

   45 expression: expression • COMMA assignment_expression
  135 if_statement: IF LP expression • RP block
  136             | IF LP expression • RP block ELSE block
  137             | IF LP expression • RP block elsif_list
  138             | IF LP expression • RP block elsif_list ELSE block

    RP     shift, and go to state 245
    COMMA  shift, and go to state 137


State 180

   45 expression: expression • COMMA assignment_expression
  144 switch_statement: SWITCH LP expression • RP case_list default_opt

    RP     shift, and go to state 246
    COMMA  shift, and go to state 137


State 181

   88 primary_no_new_array: IDENTIFIER LB • expression RB

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 178
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 182

  158 return_statement: RETURN_T expression_opt SEMICOLON •

    $default  reduce using rule 158 (return_statement)


State 183

  161 break_statement: BREAK identifier_opt SEMICOLON •

    $default  reduce using rule 161 (break_statement)


State 184

  162 continue_statement: CONTINUE identifier_opt SEMICOLON •

    $default  reduce using rule 162 (continue_statement)


State 185

   92 primary_no_new_array: LP expression RP •

    $default  reduce using rule 92 (primary_no_new_array)


State 186

  109 array_literal: LC expression_list RC •

    $default  reduce using rule 109 (array_literal)


State 187

  110 array_literal: LC expression_list COMMA • RC
  121 expression_list: expression_list COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    RC              shift, and go to state 247
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 248
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 188

  178 block: LC RC •

    $default  reduce using rule 178 (block)


State 189

  177 block: LC @2 • statement_list RC

    INT_LITERAL       shift, and go to state 13
    DOUBLE_LITERAL    shift, and go to state 14
    STRING_LITERAL    shift, and go to state 15
    REGEXP_LITERAL    shift, and go to state 16
    IDENTIFIER        shift, and go to state 17
    IF                shift, and go to state 18
    SWITCH            shift, and go to state 19
    RETURN_T          shift, and go to state 20
    BREAK             shift, and go to state 21
    CONTINUE          shift, and go to state 22
    NULL_T            shift, and go to state 23
    LP                shift, and go to state 24
    LC                shift, and go to state 25
    SUB               shift, and go to state 26
    BIT_NOT           shift, and go to state 27
    TRUE_T            shift, and go to state 28
    FALSE_T           shift, and go to state 29
    EXCLAMATION       shift, and go to state 30
    TRY               shift, and go to state 31
    THROW             shift, and go to state 32
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    NEW               shift, and go to state 39
    THIS_T            shift, and go to state 47
    SUPER_T           shift, and go to state 48
    FINAL             shift, and go to state 50

    $default  reduce using rule 142 (label_opt)

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 249
    statement_list             go to state 250
    expression                 go to state 59
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    statement                  go to state 251
    if_statement               go to state 74
    label_opt                  go to state 75
    switch_statement           go to state 76
    while_statement            go to state 77
    for_statement              go to state 78
    do_while_statement         go to state 79
    foreach_statement          go to state 80
    return_statement           go to state 81
    break_statement            go to state 82
    continue_statement         go to state 83
    try_statement              go to state 84
    throw_statement            go to state 85
    declaration_statement      go to state 86


State 190

  169 catch_clause: CATCH • @1 LP type_specifier IDENTIFIER RP block

    $default  reduce using rule 168 (@1)

    @1  go to state 252


State 191

  164 try_statement: TRY block FINALLY • block

    LC  shift, and go to state 120

    block  go to state 253


State 192

  163 try_statement: TRY block catch_list • FINALLY block
  165              | TRY block catch_list •
  167 catch_list: catch_list • catch_clause

    CATCH    shift, and go to state 190
    FINALLY  shift, and go to state 254

    $default  reduce using rule 165 (try_statement)

    catch_clause  go to state 255


State 193

  166 catch_list: catch_clause •

    $default  reduce using rule 166 (catch_list)


State 194

  170 throw_statement: THROW expression SEMICOLON •

    $default  reduce using rule 170 (throw_statement)


State 195

  104 primary_no_new_array: NEW IDENTIFIER LP • RP
  105                     | NEW IDENTIFIER LP • argument_list RP

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    RP              shift, and go to state 256
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    argument_list              go to state 257
    assignment_expression      go to state 231
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 196

  106 primary_no_new_array: NEW IDENTIFIER DOT • IDENTIFIER LP RP
  107                     | NEW IDENTIFIER DOT • IDENTIFIER LP argument_list RP

    IDENTIFIER  shift, and go to state 258


State 197

  117 dimension_expression: LB • expression RB

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 259
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 198

  111 array_creation: NEW basic_type_specifier dimension_expression_list •
  112               | NEW basic_type_specifier dimension_expression_list • dimension_list
  116 dimension_expression_list: dimension_expression_list • dimension_expression

    LB  shift, and go to state 260

    $default  reduce using rule 111 (array_creation)

    dimension_expression  go to state 261
    dimension_list        go to state 262


State 199

  115 dimension_expression_list: dimension_expression •

    $default  reduce using rule 115 (dimension_expression_list)


State 200

  113 array_creation: NEW identifier_type_specifier dimension_expression_list •
  114               | NEW identifier_type_specifier dimension_expression_list • dimension_list
  116 dimension_expression_list: dimension_expression_list • dimension_expression

    LB  shift, and go to state 260

    $default  reduce using rule 113 (array_creation)

    dimension_expression  go to state 261
    dimension_list        go to state 263


State 201

   29 array_type_specifier: IDENTIFIER LB • RB

    RB  shift, and go to state 177


State 202

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER • LP parameter_list RP throws_clause SEMICOLON
  228                    | DELEGATE type_specifier IDENTIFIER • LP RP throws_clause SEMICOLON

    LP  shift, and go to state 264


State 203

  174 declaration_statement: FINAL type_specifier IDENTIFIER • SEMICOLON
  175                      | FINAL type_specifier IDENTIFIER • ASSIGN_T expression SEMICOLON

    SEMICOLON  shift, and go to state 265
    ASSIGN_T   shift, and go to state 266


State 204

  229 enum_definition: ENUM IDENTIFIER LC • enumerator_list RC
  230                | ENUM IDENTIFIER LC • enumerator_list COMMA RC

    IDENTIFIER  shift, and go to state 267

    enumerator_list  go to state 268


State 205

  233 const_definition: CONST IDENTIFIER ASSIGN_T • expression SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 269
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 206

  234 const_definition: CONST type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 270


State 207

   28 array_type_specifier: basic_type_specifier LB RB •

    $default  reduce using rule 28 (array_type_specifier)


State 208

   30 array_type_specifier: array_type_specifier LB RB •

    $default  reduce using rule 30 (array_type_specifier)


State 209

   34 function_definition: type_specifier IDENTIFIER LP • parameter_list RP throws_clause block
   35                    | type_specifier IDENTIFIER LP • RP throws_clause block
   36                    | type_specifier IDENTIFIER LP • parameter_list RP throws_clause SEMICOLON
   37                    | type_specifier IDENTIFIER LP • RP throws_clause SEMICOLON

    IDENTIFIER        shift, and go to state 127
    RP                shift, and go to state 271
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 272
    parameter_list             go to state 273


State 210

  172 declaration_statement: type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 172 (declaration_statement)


State 211

  173 declaration_statement: type_specifier IDENTIFIER ASSIGN_T • expression SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 274
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 212

   45 expression: expression COMMA assignment_expression •

    $default  reduce using rule 45 (expression)


State 213

   55 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression •
   57 logical_and_expression: logical_and_expression • LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 139

    $default  reduce using rule 55 (logical_or_expression)


State 214

   57 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression •
   59 equality_expression: equality_expression • EQ relational_expression
   60                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 140
    NE  shift, and go to state 141

    $default  reduce using rule 57 (logical_and_expression)


State 215

   59 equality_expression: equality_expression EQ relational_expression •
   62 relational_expression: relational_expression • GT additive_expression
   63                      | relational_expression • GE additive_expression
   64                      | relational_expression • LT additive_expression
   65                      | relational_expression • LE additive_expression

    GT  shift, and go to state 142
    GE  shift, and go to state 143
    LT  shift, and go to state 144
    LE  shift, and go to state 145

    $default  reduce using rule 59 (equality_expression)


State 216

   60 equality_expression: equality_expression NE relational_expression •
   62 relational_expression: relational_expression • GT additive_expression
   63                      | relational_expression • GE additive_expression
   64                      | relational_expression • LT additive_expression
   65                      | relational_expression • LE additive_expression

    GT  shift, and go to state 142
    GE  shift, and go to state 143
    LT  shift, and go to state 144
    LE  shift, and go to state 145

    $default  reduce using rule 60 (equality_expression)


State 217

   62 relational_expression: relational_expression GT additive_expression •
   67 additive_expression: additive_expression • ADD multiplicative_expression
   68                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 146
    SUB  shift, and go to state 147

    $default  reduce using rule 62 (relational_expression)


State 218

   63 relational_expression: relational_expression GE additive_expression •
   67 additive_expression: additive_expression • ADD multiplicative_expression
   68                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 146
    SUB  shift, and go to state 147

    $default  reduce using rule 63 (relational_expression)


State 219

   64 relational_expression: relational_expression LT additive_expression •
   67 additive_expression: additive_expression • ADD multiplicative_expression
   68                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 146
    SUB  shift, and go to state 147

    $default  reduce using rule 64 (relational_expression)


State 220

   65 relational_expression: relational_expression LE additive_expression •
   67 additive_expression: additive_expression • ADD multiplicative_expression
   68                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 146
    SUB  shift, and go to state 147

    $default  reduce using rule 65 (relational_expression)


State 221

   67 additive_expression: additive_expression ADD multiplicative_expression •
   70 multiplicative_expression: multiplicative_expression • MUL unary_expression
   71                          | multiplicative_expression • DIV unary_expression
   72                          | multiplicative_expression • MOD unary_expression
   73                          | multiplicative_expression • BIT_AND unary_expression
   74                          | multiplicative_expression • BIT_OR unary_expression
   75                          | multiplicative_expression • BIT_XOR unary_expression

    MUL      shift, and go to state 148
    DIV      shift, and go to state 149
    MOD      shift, and go to state 150
    BIT_AND  shift, and go to state 151
    BIT_OR   shift, and go to state 152
    BIT_XOR  shift, and go to state 153

    $default  reduce using rule 67 (additive_expression)


State 222

   68 additive_expression: additive_expression SUB multiplicative_expression •
   70 multiplicative_expression: multiplicative_expression • MUL unary_expression
   71                          | multiplicative_expression • DIV unary_expression
   72                          | multiplicative_expression • MOD unary_expression
   73                          | multiplicative_expression • BIT_AND unary_expression
   74                          | multiplicative_expression • BIT_OR unary_expression
   75                          | multiplicative_expression • BIT_XOR unary_expression

    MUL      shift, and go to state 148
    DIV      shift, and go to state 149
    MOD      shift, and go to state 150
    BIT_AND  shift, and go to state 151
    BIT_OR   shift, and go to state 152
    BIT_XOR  shift, and go to state 153

    $default  reduce using rule 68 (additive_expression)


State 223

   70 multiplicative_expression: multiplicative_expression MUL unary_expression •

    $default  reduce using rule 70 (multiplicative_expression)


State 224

   71 multiplicative_expression: multiplicative_expression DIV unary_expression •

    $default  reduce using rule 71 (multiplicative_expression)


State 225

   72 multiplicative_expression: multiplicative_expression MOD unary_expression •

    $default  reduce using rule 72 (multiplicative_expression)


State 226

   73 multiplicative_expression: multiplicative_expression BIT_AND unary_expression •

    $default  reduce using rule 73 (multiplicative_expression)


State 227

   74 multiplicative_expression: multiplicative_expression BIT_OR unary_expression •

    $default  reduce using rule 74 (multiplicative_expression)


State 228

   75 multiplicative_expression: multiplicative_expression BIT_XOR unary_expression •

    $default  reduce using rule 75 (multiplicative_expression)


State 229

   91 primary_no_new_array: primary_expression LP RP •

    $default  reduce using rule 91 (primary_no_new_array)


State 230

   41 argument_list: argument_list • COMMA assignment_expression
   90 primary_no_new_array: primary_expression LP argument_list • RP

    RP     shift, and go to state 275
    COMMA  shift, and go to state 276


State 231

   40 argument_list: assignment_expression •

    $default  reduce using rule 40 (argument_list)


State 232

   89 primary_no_new_array: primary_expression DOT IDENTIFIER •

    $default  reduce using rule 89 (primary_no_new_array)


State 233

   83 postfix_expression: primary_expression INSTANCEOF type_specifier •

    $default  reduce using rule 83 (postfix_expression)


State 234

   93 primary_no_new_array: primary_expression DOWN_CAST_BEGIN type_specifier • DOWN_CAST_END

    DOWN_CAST_END  shift, and go to state 277


State 235

   47 assignment_expression: primary_expression assignment_operator assignment_expression •

    $default  reduce using rule 47 (assignment_expression)


State 236

   45 expression: expression • COMMA assignment_expression
   87 primary_no_new_array: primary_no_new_array LB expression • RB

    RB     shift, and go to state 278
    COMMA  shift, and go to state 137


State 237

  152 while_statement: label_opt WHILE LP • expression RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 279
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 238

  154 do_while_statement: label_opt DO_T block • WHILE LP expression RP SEMICOLON

    WHILE  shift, and go to state 280


State 239

  153 for_statement: label_opt FOR LP • expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    $default  reduce using rule 156 (expression_opt)

    expression                 go to state 107
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_opt             go to state 281


State 240

  155 foreach_statement: label_opt FOREACH LP • IDENTIFIER COLON expression RP block

    IDENTIFIER  shift, and go to state 282


State 241

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER • extends LC $@4 member_declaration_list RC
  186                 | class_or_member_modifier_list class_or_interface IDENTIFIER • extends LC $@6 RC

    COLON  shift, and go to state 242

    $default  reduce using rule 195 (extends)

    extends  go to state 283


State 242

  196 extends: COLON • extends_list

    IDENTIFIER  shift, and go to state 284

    extends_list  go to state 285


State 243

  180 class_definition: class_or_interface IDENTIFIER extends • LC $@3 member_declaration_list RC
  184                 | class_or_interface IDENTIFIER extends • LC $@5 RC

    LC  shift, and go to state 286


State 244

   88 primary_no_new_array: IDENTIFIER LB expression RB •

    $default  reduce using rule 88 (primary_no_new_array)


State 245

  135 if_statement: IF LP expression RP • block
  136             | IF LP expression RP • block ELSE block
  137             | IF LP expression RP • block elsif_list
  138             | IF LP expression RP • block elsif_list ELSE block

    LC  shift, and go to state 120

    block  go to state 287


State 246

  144 switch_statement: SWITCH LP expression RP • case_list default_opt

    CASE  shift, and go to state 288

    case_list  go to state 289
    one_case   go to state 290


State 247

  110 array_literal: LC expression_list COMMA RC •

    $default  reduce using rule 110 (array_literal)


State 248

  121 expression_list: expression_list COMMA assignment_expression •

    $default  reduce using rule 121 (expression_list)


State 249

  172 declaration_statement: type_specifier • IDENTIFIER SEMICOLON
  173                      | type_specifier • IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 291


State 250

   43 statement_list: statement_list • statement
  177 block: LC @2 statement_list • RC

    INT_LITERAL       shift, and go to state 13
    DOUBLE_LITERAL    shift, and go to state 14
    STRING_LITERAL    shift, and go to state 15
    REGEXP_LITERAL    shift, and go to state 16
    IDENTIFIER        shift, and go to state 17
    IF                shift, and go to state 18
    SWITCH            shift, and go to state 19
    RETURN_T          shift, and go to state 20
    BREAK             shift, and go to state 21
    CONTINUE          shift, and go to state 22
    NULL_T            shift, and go to state 23
    LP                shift, and go to state 24
    LC                shift, and go to state 25
    RC                shift, and go to state 292
    SUB               shift, and go to state 26
    BIT_NOT           shift, and go to state 27
    TRUE_T            shift, and go to state 28
    FALSE_T           shift, and go to state 29
    EXCLAMATION       shift, and go to state 30
    TRY               shift, and go to state 31
    THROW             shift, and go to state 32
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    NEW               shift, and go to state 39
    THIS_T            shift, and go to state 47
    SUPER_T           shift, and go to state 48
    FINAL             shift, and go to state 50

    $default  reduce using rule 142 (label_opt)

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 249
    expression                 go to state 59
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    statement                  go to state 293
    if_statement               go to state 74
    label_opt                  go to state 75
    switch_statement           go to state 76
    while_statement            go to state 77
    for_statement              go to state 78
    do_while_statement         go to state 79
    foreach_statement          go to state 80
    return_statement           go to state 81
    break_statement            go to state 82
    continue_statement         go to state 83
    try_statement              go to state 84
    throw_statement            go to state 85
    declaration_statement      go to state 86


State 251

   42 statement_list: statement •

    $default  reduce using rule 42 (statement_list)


State 252

  169 catch_clause: CATCH @1 • LP type_specifier IDENTIFIER RP block

    LP  shift, and go to state 294


State 253

  164 try_statement: TRY block FINALLY block •

    $default  reduce using rule 164 (try_statement)


State 254

  163 try_statement: TRY block catch_list FINALLY • block

    LC  shift, and go to state 120

    block  go to state 295


State 255

  167 catch_list: catch_list catch_clause •

    $default  reduce using rule 167 (catch_list)


State 256

  104 primary_no_new_array: NEW IDENTIFIER LP RP •

    $default  reduce using rule 104 (primary_no_new_array)


State 257

   41 argument_list: argument_list • COMMA assignment_expression
  105 primary_no_new_array: NEW IDENTIFIER LP argument_list • RP

    RP     shift, and go to state 296
    COMMA  shift, and go to state 276


State 258

  106 primary_no_new_array: NEW IDENTIFIER DOT IDENTIFIER • LP RP
  107                     | NEW IDENTIFIER DOT IDENTIFIER • LP argument_list RP

    LP  shift, and go to state 297


State 259

   45 expression: expression • COMMA assignment_expression
  117 dimension_expression: LB expression • RB

    RB     shift, and go to state 298
    COMMA  shift, and go to state 137


State 260

  117 dimension_expression: LB • expression RB
  118 dimension_list: LB • RB

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    RB              shift, and go to state 299
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 259
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 261

  116 dimension_expression_list: dimension_expression_list dimension_expression •

    $default  reduce using rule 116 (dimension_expression_list)


State 262

  112 array_creation: NEW basic_type_specifier dimension_expression_list dimension_list •
  119 dimension_list: dimension_list • LB RB

    LB  shift, and go to state 300

    $default  reduce using rule 112 (array_creation)


State 263

  114 array_creation: NEW identifier_type_specifier dimension_expression_list dimension_list •
  119 dimension_list: dimension_list • LB RB

    LB  shift, and go to state 300

    $default  reduce using rule 114 (array_creation)


State 264

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP • parameter_list RP throws_clause SEMICOLON
  228                    | DELEGATE type_specifier IDENTIFIER LP • RP throws_clause SEMICOLON

    IDENTIFIER        shift, and go to state 127
    RP                shift, and go to state 301
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 272
    parameter_list             go to state 302


State 265

  174 declaration_statement: FINAL type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 174 (declaration_statement)


State 266

  175 declaration_statement: FINAL type_specifier IDENTIFIER ASSIGN_T • expression SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 303
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 267

  231 enumerator_list: IDENTIFIER •

    $default  reduce using rule 231 (enumerator_list)


State 268

  229 enum_definition: ENUM IDENTIFIER LC enumerator_list • RC
  230                | ENUM IDENTIFIER LC enumerator_list • COMMA RC
  232 enumerator_list: enumerator_list • COMMA IDENTIFIER

    RC     shift, and go to state 304
    COMMA  shift, and go to state 305


State 269

   45 expression: expression • COMMA assignment_expression
  233 const_definition: CONST IDENTIFIER ASSIGN_T expression • SEMICOLON

    SEMICOLON  shift, and go to state 306
    COMMA      shift, and go to state 137


State 270

  234 const_definition: CONST type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 234 (const_definition)


State 271

   35 function_definition: type_specifier IDENTIFIER LP RP • throws_clause block
   37                    | type_specifier IDENTIFIER LP RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 308


State 272

   38 parameter_list: type_specifier • IDENTIFIER

    IDENTIFIER  shift, and go to state 309


State 273

   34 function_definition: type_specifier IDENTIFIER LP parameter_list • RP throws_clause block
   36                    | type_specifier IDENTIFIER LP parameter_list • RP throws_clause SEMICOLON
   39 parameter_list: parameter_list • COMMA type_specifier IDENTIFIER

    RP     shift, and go to state 310
    COMMA  shift, and go to state 311


State 274

   45 expression: expression • COMMA assignment_expression
  173 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression • SEMICOLON

    SEMICOLON  shift, and go to state 312
    COMMA      shift, and go to state 137


State 275

   90 primary_no_new_array: primary_expression LP argument_list RP •

    $default  reduce using rule 90 (primary_no_new_array)


State 276

   41 argument_list: argument_list COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 313
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 277

   93 primary_no_new_array: primary_expression DOWN_CAST_BEGIN type_specifier DOWN_CAST_END •

    $default  reduce using rule 93 (primary_no_new_array)


State 278

   87 primary_no_new_array: primary_no_new_array LB expression RB •

    $default  reduce using rule 87 (primary_no_new_array)


State 279

   45 expression: expression • COMMA assignment_expression
  152 while_statement: label_opt WHILE LP expression • RP block

    RP     shift, and go to state 314
    COMMA  shift, and go to state 137


State 280

  154 do_while_statement: label_opt DO_T block WHILE • LP expression RP SEMICOLON

    LP  shift, and go to state 315


State 281

  153 for_statement: label_opt FOR LP expression_opt • SEMICOLON expression_opt SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 316


State 282

  155 foreach_statement: label_opt FOREACH LP IDENTIFIER • COLON expression RP block

    COLON  shift, and go to state 317


State 283

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends • LC $@4 member_declaration_list RC
  186                 | class_or_member_modifier_list class_or_interface IDENTIFIER extends • LC $@6 RC

    LC  shift, and go to state 318


State 284

  197 extends_list: IDENTIFIER •

    $default  reduce using rule 197 (extends_list)


State 285

  196 extends: COLON extends_list •
  198 extends_list: extends_list • COMMA IDENTIFIER

    COMMA  shift, and go to state 319

    $default  reduce using rule 196 (extends)


State 286

  180 class_definition: class_or_interface IDENTIFIER extends LC • $@3 member_declaration_list RC
  184                 | class_or_interface IDENTIFIER extends LC • $@5 RC

    RC        reduce using rule 183 ($@5)
    $default  reduce using rule 179 ($@3)

    $@3  go to state 320
    $@5  go to state 321


State 287

  135 if_statement: IF LP expression RP block •
  136             | IF LP expression RP block • ELSE block
  137             | IF LP expression RP block • elsif_list
  138             | IF LP expression RP block • elsif_list ELSE block

    ELSE   shift, and go to state 322
    ELSIF  shift, and go to state 323

    $default  reduce using rule 135 (if_statement)

    elsif_list  go to state 324
    elsif       go to state 325


State 288

  147 one_case: CASE • case_expression_list block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 326
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_list            go to state 327
    case_expression_list       go to state 328


State 289

  144 switch_statement: SWITCH LP expression RP case_list • default_opt
  146 case_list: case_list • one_case

    CASE       shift, and go to state 288
    DEFAULT_T  shift, and go to state 329

    $default  reduce using rule 148 (default_opt)

    one_case     go to state 330
    default_opt  go to state 331


State 290

  145 case_list: one_case •

    $default  reduce using rule 145 (case_list)


State 291

  172 declaration_statement: type_specifier IDENTIFIER • SEMICOLON
  173                      | type_specifier IDENTIFIER • ASSIGN_T expression SEMICOLON

    SEMICOLON  shift, and go to state 210
    ASSIGN_T   shift, and go to state 211


State 292

  177 block: LC @2 statement_list RC •

    $default  reduce using rule 177 (block)


State 293

   43 statement_list: statement_list statement •

    $default  reduce using rule 43 (statement_list)


State 294

  169 catch_clause: CATCH @1 LP • type_specifier IDENTIFIER RP block

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 332


State 295

  163 try_statement: TRY block catch_list FINALLY block •

    $default  reduce using rule 163 (try_statement)


State 296

  105 primary_no_new_array: NEW IDENTIFIER LP argument_list RP •

    $default  reduce using rule 105 (primary_no_new_array)


State 297

  106 primary_no_new_array: NEW IDENTIFIER DOT IDENTIFIER LP • RP
  107                     | NEW IDENTIFIER DOT IDENTIFIER LP • argument_list RP

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    RP              shift, and go to state 333
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    argument_list              go to state 334
    assignment_expression      go to state 231
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 298

  117 dimension_expression: LB expression RB •

    $default  reduce using rule 117 (dimension_expression)


State 299

  118 dimension_list: LB RB •

    $default  reduce using rule 118 (dimension_list)


State 300

  119 dimension_list: dimension_list LB • RB

    RB  shift, and go to state 335


State 301

  228 delegate_definition: DELEGATE type_specifier IDENTIFIER LP RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 336


State 302

   39 parameter_list: parameter_list • COMMA type_specifier IDENTIFIER
  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP parameter_list • RP throws_clause SEMICOLON

    RP     shift, and go to state 337
    COMMA  shift, and go to state 311


State 303

   45 expression: expression • COMMA assignment_expression
  175 declaration_statement: FINAL type_specifier IDENTIFIER ASSIGN_T expression • SEMICOLON

    SEMICOLON  shift, and go to state 338
    COMMA      shift, and go to state 137


State 304

  229 enum_definition: ENUM IDENTIFIER LC enumerator_list RC •

    $default  reduce using rule 229 (enum_definition)


State 305

  230 enum_definition: ENUM IDENTIFIER LC enumerator_list COMMA • RC
  232 enumerator_list: enumerator_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 339
    RC          shift, and go to state 340


State 306

  233 const_definition: CONST IDENTIFIER ASSIGN_T expression SEMICOLON •

    $default  reduce using rule 233 (const_definition)


State 307

  212 throws_clause: THROWS • exception_list

    IDENTIFIER  shift, and go to state 341

    exception_list  go to state 342


State 308

   35 function_definition: type_specifier IDENTIFIER LP RP throws_clause • block
   37                    | type_specifier IDENTIFIER LP RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 343

    block  go to state 344


State 309

   38 parameter_list: type_specifier IDENTIFIER •

    $default  reduce using rule 38 (parameter_list)


State 310

   34 function_definition: type_specifier IDENTIFIER LP parameter_list RP • throws_clause block
   36                    | type_specifier IDENTIFIER LP parameter_list RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 345


State 311

   39 parameter_list: parameter_list COMMA • type_specifier IDENTIFIER

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 346


State 312

  173 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON •

    $default  reduce using rule 173 (declaration_statement)


State 313

   41 argument_list: argument_list COMMA assignment_expression •

    $default  reduce using rule 41 (argument_list)


State 314

  152 while_statement: label_opt WHILE LP expression RP • block

    LC  shift, and go to state 120

    block  go to state 347


State 315

  154 do_while_statement: label_opt DO_T block WHILE LP • expression RP SEMICOLON

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 348
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 316

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON • expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    $default  reduce using rule 156 (expression_opt)

    expression                 go to state 107
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_opt             go to state 349


State 317

  155 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON • expression RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 350
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 318

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC • $@4 member_declaration_list RC
  186                 | class_or_member_modifier_list class_or_interface IDENTIFIER extends LC • $@6 RC

    RC        reduce using rule 185 ($@6)
    $default  reduce using rule 181 ($@4)

    $@4  go to state 351
    $@6  go to state 352


State 319

  198 extends_list: extends_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 353


State 320

  180 class_definition: class_or_interface IDENTIFIER extends LC $@3 • member_declaration_list RC

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    CONSTRUCTOR       shift, and go to state 354
    FINAL             shift, and go to state 355

    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 356
    class_or_member_modifier_list  go to state 357
    class_or_member_modifier       go to state 89
    member_declaration_list        go to state 358
    member_declaration             go to state 359
    method_member                  go to state 360
    method_function_definition     go to state 361
    constructor_definition         go to state 362
    access_modifier                go to state 91
    field_member                   go to state 363


State 321

  184 class_definition: class_or_interface IDENTIFIER extends LC $@5 • RC

    RC  shift, and go to state 364


State 322

  136 if_statement: IF LP expression RP block ELSE • block

    LC  shift, and go to state 120

    block  go to state 365


State 323

  141 elsif: ELSIF • LP expression RP block

    LP  shift, and go to state 366


State 324

  137 if_statement: IF LP expression RP block elsif_list •
  138             | IF LP expression RP block elsif_list • ELSE block
  140 elsif_list: elsif_list • elsif

    ELSE   shift, and go to state 367
    ELSIF  shift, and go to state 323

    $default  reduce using rule 137 (if_statement)

    elsif  go to state 368


State 325

  139 elsif_list: elsif •

    $default  reduce using rule 139 (elsif_list)


State 326

  120 expression_list: assignment_expression •
  150 case_expression_list: assignment_expression •

    LC        reduce using rule 150 (case_expression_list)
    $default  reduce using rule 120 (expression_list)


State 327

  121 expression_list: expression_list • COMMA assignment_expression
  151 case_expression_list: expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 369


State 328

  147 one_case: CASE case_expression_list • block

    LC  shift, and go to state 120

    block  go to state 370


State 329

  149 default_opt: DEFAULT_T • block

    LC  shift, and go to state 120

    block  go to state 371


State 330

  146 case_list: case_list one_case •

    $default  reduce using rule 146 (case_list)


State 331

  144 switch_statement: SWITCH LP expression RP case_list default_opt •

    $default  reduce using rule 144 (switch_statement)


State 332

  169 catch_clause: CATCH @1 LP type_specifier • IDENTIFIER RP block

    IDENTIFIER  shift, and go to state 372


State 333

  106 primary_no_new_array: NEW IDENTIFIER DOT IDENTIFIER LP RP •

    $default  reduce using rule 106 (primary_no_new_array)


State 334

   41 argument_list: argument_list • COMMA assignment_expression
  107 primary_no_new_array: NEW IDENTIFIER DOT IDENTIFIER LP argument_list • RP

    RP     shift, and go to state 373
    COMMA  shift, and go to state 276


State 335

  119 dimension_list: dimension_list LB RB •

    $default  reduce using rule 119 (dimension_list)


State 336

  228 delegate_definition: DELEGATE type_specifier IDENTIFIER LP RP throws_clause • SEMICOLON

    SEMICOLON  shift, and go to state 374


State 337

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP parameter_list RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 375


State 338

  175 declaration_statement: FINAL type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON •

    $default  reduce using rule 175 (declaration_statement)


State 339

  232 enumerator_list: enumerator_list COMMA IDENTIFIER •

    $default  reduce using rule 232 (enumerator_list)


State 340

  230 enum_definition: ENUM IDENTIFIER LC enumerator_list COMMA RC •

    $default  reduce using rule 230 (enum_definition)


State 341

  213 exception_list: IDENTIFIER •

    $default  reduce using rule 213 (exception_list)


State 342

  212 throws_clause: THROWS exception_list •
  214 exception_list: exception_list • COMMA IDENTIFIER

    COMMA  shift, and go to state 376

    $default  reduce using rule 212 (throws_clause)


State 343

   37 function_definition: type_specifier IDENTIFIER LP RP throws_clause SEMICOLON •

    $default  reduce using rule 37 (function_definition)


State 344

   35 function_definition: type_specifier IDENTIFIER LP RP throws_clause block •

    $default  reduce using rule 35 (function_definition)


State 345

   34 function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause • block
   36                    | type_specifier IDENTIFIER LP parameter_list RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 377

    block  go to state 378


State 346

   39 parameter_list: parameter_list COMMA type_specifier • IDENTIFIER

    IDENTIFIER  shift, and go to state 379


State 347

  152 while_statement: label_opt WHILE LP expression RP block •

    $default  reduce using rule 152 (while_statement)


State 348

   45 expression: expression • COMMA assignment_expression
  154 do_while_statement: label_opt DO_T block WHILE LP expression • RP SEMICOLON

    RP     shift, and go to state 380
    COMMA  shift, and go to state 137


State 349

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt • SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 381


State 350

   45 expression: expression • COMMA assignment_expression
  155 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression • RP block

    RP     shift, and go to state 382
    COMMA  shift, and go to state 137


State 351

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@4 • member_declaration_list RC

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    CONSTRUCTOR       shift, and go to state 354
    FINAL             shift, and go to state 355

    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 356
    class_or_member_modifier_list  go to state 357
    class_or_member_modifier       go to state 89
    member_declaration_list        go to state 383
    member_declaration             go to state 359
    method_member                  go to state 360
    method_function_definition     go to state 361
    constructor_definition         go to state 362
    access_modifier                go to state 91
    field_member                   go to state 363


State 352

  186 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@6 • RC

    RC  shift, and go to state 384


State 353

  198 extends_list: extends_list COMMA IDENTIFIER •

    $default  reduce using rule 198 (extends_list)


State 354

  215 constructor_definition: CONSTRUCTOR • IDENTIFIER LP parameter_list RP throws_clause block
  216                       | CONSTRUCTOR • IDENTIFIER LP RP throws_clause block
  217                       | CONSTRUCTOR • IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  218                       | CONSTRUCTOR • IDENTIFIER LP RP throws_clause SEMICOLON

    IDENTIFIER  shift, and go to state 385


State 355

  225 field_member: FINAL • type_specifier IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 386


State 356

  207 method_function_definition: type_specifier • IDENTIFIER LP parameter_list RP throws_clause block
  208                           | type_specifier • IDENTIFIER LP RP throws_clause block
  209                           | type_specifier • IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier • IDENTIFIER LP RP throws_clause SEMICOLON
  223 field_member: type_specifier • IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER  shift, and go to state 387


State 357

  188 class_or_member_modifier_list: class_or_member_modifier_list • class_or_member_modifier
  204 method_member: class_or_member_modifier_list • method_function_definition
  206              | class_or_member_modifier_list • constructor_definition
  224 field_member: class_or_member_modifier_list • type_specifier IDENTIFIER initializer_opt SEMICOLON
  226             | class_or_member_modifier_list • FINAL type_specifier IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    CONSTRUCTOR       shift, and go to state 354
    FINAL             shift, and go to state 388

    basic_type_specifier        go to state 54
    identifier_type_specifier   go to state 55
    array_type_specifier        go to state 56
    type_specifier              go to state 389
    class_or_member_modifier    go to state 172
    method_function_definition  go to state 390
    constructor_definition      go to state 391
    access_modifier             go to state 91


State 358

  180 class_definition: class_or_interface IDENTIFIER extends LC $@3 member_declaration_list • RC
  200 member_declaration_list: member_declaration_list • member_declaration

    IDENTIFIER        shift, and go to state 127
    RC                shift, and go to state 392
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    CONSTRUCTOR       shift, and go to state 354
    FINAL             shift, and go to state 355

    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 356
    class_or_member_modifier_list  go to state 357
    class_or_member_modifier       go to state 89
    member_declaration             go to state 393
    method_member                  go to state 360
    method_function_definition     go to state 361
    constructor_definition         go to state 362
    access_modifier                go to state 91
    field_member                   go to state 363


State 359

  199 member_declaration_list: member_declaration •

    $default  reduce using rule 199 (member_declaration_list)


State 360

  201 member_declaration: method_member •

    $default  reduce using rule 201 (member_declaration)


State 361

  203 method_member: method_function_definition •

    $default  reduce using rule 203 (method_member)


State 362

  205 method_member: constructor_definition •

    $default  reduce using rule 205 (method_member)


State 363

  202 member_declaration: field_member •

    $default  reduce using rule 202 (member_declaration)


State 364

  184 class_definition: class_or_interface IDENTIFIER extends LC $@5 RC •

    $default  reduce using rule 184 (class_definition)


State 365

  136 if_statement: IF LP expression RP block ELSE block •

    $default  reduce using rule 136 (if_statement)


State 366

  141 elsif: ELSIF LP • expression RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 394
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 367

  138 if_statement: IF LP expression RP block elsif_list ELSE • block

    LC  shift, and go to state 120

    block  go to state 395


State 368

  140 elsif_list: elsif_list elsif •

    $default  reduce using rule 140 (elsif_list)


State 369

  121 expression_list: expression_list COMMA • assignment_expression
  151 case_expression_list: expression_list COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    assignment_expression      go to state 396
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 370

  147 one_case: CASE case_expression_list block •

    $default  reduce using rule 147 (one_case)


State 371

  149 default_opt: DEFAULT_T block •

    $default  reduce using rule 149 (default_opt)


State 372

  169 catch_clause: CATCH @1 LP type_specifier IDENTIFIER • RP block

    RP  shift, and go to state 397


State 373

  107 primary_no_new_array: NEW IDENTIFIER DOT IDENTIFIER LP argument_list RP •

    $default  reduce using rule 107 (primary_no_new_array)


State 374

  228 delegate_definition: DELEGATE type_specifier IDENTIFIER LP RP throws_clause SEMICOLON •

    $default  reduce using rule 228 (delegate_definition)


State 375

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP parameter_list RP throws_clause • SEMICOLON

    SEMICOLON  shift, and go to state 398


State 376

  214 exception_list: exception_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 399


State 377

   36 function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON •

    $default  reduce using rule 36 (function_definition)


State 378

   34 function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause block •

    $default  reduce using rule 34 (function_definition)


State 379

   39 parameter_list: parameter_list COMMA type_specifier IDENTIFIER •

    $default  reduce using rule 39 (parameter_list)


State 380

  154 do_while_statement: label_opt DO_T block WHILE LP expression RP • SEMICOLON

    SEMICOLON  shift, and go to state 400


State 381

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON • expression_opt RP block

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    $default  reduce using rule 156 (expression_opt)

    expression                 go to state 107
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72
    expression_opt             go to state 401


State 382

  155 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP • block

    LC  shift, and go to state 120

    block  go to state 402


State 383

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@4 member_declaration_list • RC
  200 member_declaration_list: member_declaration_list • member_declaration

    IDENTIFIER        shift, and go to state 127
    RC                shift, and go to state 403
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38
    PUBLIC_T          shift, and go to state 42
    PRIVATE_T         shift, and go to state 43
    VIRTUAL_T         shift, and go to state 44
    OVERRIDE_T        shift, and go to state 45
    ABSTRACT_T        shift, and go to state 46
    CONSTRUCTOR       shift, and go to state 354
    FINAL             shift, and go to state 355

    basic_type_specifier           go to state 54
    identifier_type_specifier      go to state 55
    array_type_specifier           go to state 56
    type_specifier                 go to state 356
    class_or_member_modifier_list  go to state 357
    class_or_member_modifier       go to state 89
    member_declaration             go to state 393
    method_member                  go to state 360
    method_function_definition     go to state 361
    constructor_definition         go to state 362
    access_modifier                go to state 91
    field_member                   go to state 363


State 384

  186 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@6 RC •

    $default  reduce using rule 186 (class_definition)


State 385

  215 constructor_definition: CONSTRUCTOR IDENTIFIER • LP parameter_list RP throws_clause block
  216                       | CONSTRUCTOR IDENTIFIER • LP RP throws_clause block
  217                       | CONSTRUCTOR IDENTIFIER • LP parameter_list RP throws_clause SEMICOLON
  218                       | CONSTRUCTOR IDENTIFIER • LP RP throws_clause SEMICOLON

    LP  shift, and go to state 404


State 386

  225 field_member: FINAL type_specifier • IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER  shift, and go to state 405


State 387

  207 method_function_definition: type_specifier IDENTIFIER • LP parameter_list RP throws_clause block
  208                           | type_specifier IDENTIFIER • LP RP throws_clause block
  209                           | type_specifier IDENTIFIER • LP parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier IDENTIFIER • LP RP throws_clause SEMICOLON
  223 field_member: type_specifier IDENTIFIER • initializer_opt SEMICOLON

    LP        shift, and go to state 406
    ASSIGN_T  shift, and go to state 407

    $default  reduce using rule 221 (initializer_opt)

    initializer_opt  go to state 408


State 388

  226 field_member: class_or_member_modifier_list FINAL • type_specifier IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER        shift, and go to state 127
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 409


State 389

  207 method_function_definition: type_specifier • IDENTIFIER LP parameter_list RP throws_clause block
  208                           | type_specifier • IDENTIFIER LP RP throws_clause block
  209                           | type_specifier • IDENTIFIER LP parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier • IDENTIFIER LP RP throws_clause SEMICOLON
  224 field_member: class_or_member_modifier_list type_specifier • IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER  shift, and go to state 410


State 390

  204 method_member: class_or_member_modifier_list method_function_definition •

    $default  reduce using rule 204 (method_member)


State 391

  206 method_member: class_or_member_modifier_list constructor_definition •

    $default  reduce using rule 206 (method_member)


State 392

  180 class_definition: class_or_interface IDENTIFIER extends LC $@3 member_declaration_list RC •

    $default  reduce using rule 180 (class_definition)


State 393

  200 member_declaration_list: member_declaration_list member_declaration •

    $default  reduce using rule 200 (member_declaration_list)


State 394

   45 expression: expression • COMMA assignment_expression
  141 elsif: ELSIF LP expression • RP block

    RP     shift, and go to state 411
    COMMA  shift, and go to state 137


State 395

  138 if_statement: IF LP expression RP block elsif_list ELSE block •

    $default  reduce using rule 138 (if_statement)


State 396

  121 expression_list: expression_list COMMA assignment_expression •
  151 case_expression_list: expression_list COMMA assignment_expression •

    LC        reduce using rule 151 (case_expression_list)
    $default  reduce using rule 121 (expression_list)


State 397

  169 catch_clause: CATCH @1 LP type_specifier IDENTIFIER RP • block

    LC  shift, and go to state 120

    block  go to state 412


State 398

  227 delegate_definition: DELEGATE type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON •

    $default  reduce using rule 227 (delegate_definition)


State 399

  214 exception_list: exception_list COMMA IDENTIFIER •

    $default  reduce using rule 214 (exception_list)


State 400

  154 do_while_statement: label_opt DO_T block WHILE LP expression RP SEMICOLON •

    $default  reduce using rule 154 (do_while_statement)


State 401

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt • RP block

    RP  shift, and go to state 413


State 402

  155 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block •

    $default  reduce using rule 155 (foreach_statement)


State 403

  182 class_definition: class_or_member_modifier_list class_or_interface IDENTIFIER extends LC $@4 member_declaration_list RC •

    $default  reduce using rule 182 (class_definition)


State 404

  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP • parameter_list RP throws_clause block
  216                       | CONSTRUCTOR IDENTIFIER LP • RP throws_clause block
  217                       | CONSTRUCTOR IDENTIFIER LP • parameter_list RP throws_clause SEMICOLON
  218                       | CONSTRUCTOR IDENTIFIER LP • RP throws_clause SEMICOLON

    IDENTIFIER        shift, and go to state 127
    RP                shift, and go to state 414
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 272
    parameter_list             go to state 415


State 405

  225 field_member: FINAL type_specifier IDENTIFIER • initializer_opt SEMICOLON

    ASSIGN_T  shift, and go to state 407

    $default  reduce using rule 221 (initializer_opt)

    initializer_opt  go to state 416


State 406

  207 method_function_definition: type_specifier IDENTIFIER LP • parameter_list RP throws_clause block
  208                           | type_specifier IDENTIFIER LP • RP throws_clause block
  209                           | type_specifier IDENTIFIER LP • parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier IDENTIFIER LP • RP throws_clause SEMICOLON

    IDENTIFIER        shift, and go to state 127
    RP                shift, and go to state 417
    VOID_T            shift, and go to state 33
    BOOLEAN_T         shift, and go to state 34
    INT_T             shift, and go to state 35
    DOUBLE_T          shift, and go to state 36
    STRING_T          shift, and go to state 37
    NATIVE_POINTER_T  shift, and go to state 38

    basic_type_specifier       go to state 54
    identifier_type_specifier  go to state 55
    array_type_specifier       go to state 56
    type_specifier             go to state 272
    parameter_list             go to state 418


State 407

  222 initializer_opt: ASSIGN_T • expression

    INT_LITERAL     shift, and go to state 13
    DOUBLE_LITERAL  shift, and go to state 14
    STRING_LITERAL  shift, and go to state 15
    REGEXP_LITERAL  shift, and go to state 16
    IDENTIFIER      shift, and go to state 106
    NULL_T          shift, and go to state 23
    LP              shift, and go to state 24
    LC              shift, and go to state 25
    SUB             shift, and go to state 26
    BIT_NOT         shift, and go to state 27
    TRUE_T          shift, and go to state 28
    FALSE_T         shift, and go to state 29
    EXCLAMATION     shift, and go to state 30
    NEW             shift, and go to state 39
    THIS_T          shift, and go to state 47
    SUPER_T         shift, and go to state 48

    expression                 go to state 419
    assignment_expression      go to state 60
    logical_or_expression      go to state 61
    logical_and_expression     go to state 62
    equality_expression        go to state 63
    relational_expression      go to state 64
    additive_expression        go to state 65
    multiplicative_expression  go to state 66
    unary_expression           go to state 67
    postfix_expression         go to state 68
    primary_expression         go to state 69
    primary_no_new_array       go to state 70
    array_literal              go to state 71
    array_creation             go to state 72


State 408

  223 field_member: type_specifier IDENTIFIER initializer_opt • SEMICOLON

    SEMICOLON  shift, and go to state 420


State 409

  226 field_member: class_or_member_modifier_list FINAL type_specifier • IDENTIFIER initializer_opt SEMICOLON

    IDENTIFIER  shift, and go to state 421


State 410

  207 method_function_definition: type_specifier IDENTIFIER • LP parameter_list RP throws_clause block
  208                           | type_specifier IDENTIFIER • LP RP throws_clause block
  209                           | type_specifier IDENTIFIER • LP parameter_list RP throws_clause SEMICOLON
  210                           | type_specifier IDENTIFIER • LP RP throws_clause SEMICOLON
  224 field_member: class_or_member_modifier_list type_specifier IDENTIFIER • initializer_opt SEMICOLON

    LP        shift, and go to state 406
    ASSIGN_T  shift, and go to state 407

    $default  reduce using rule 221 (initializer_opt)

    initializer_opt  go to state 422


State 411

  141 elsif: ELSIF LP expression RP • block

    LC  shift, and go to state 120

    block  go to state 423


State 412

  169 catch_clause: CATCH @1 LP type_specifier IDENTIFIER RP block •

    $default  reduce using rule 169 (catch_clause)


State 413

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP • block

    LC  shift, and go to state 120

    block  go to state 424


State 414

  216 constructor_definition: CONSTRUCTOR IDENTIFIER LP RP • throws_clause block
  218                       | CONSTRUCTOR IDENTIFIER LP RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 425


State 415

   39 parameter_list: parameter_list • COMMA type_specifier IDENTIFIER
  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list • RP throws_clause block
  217                       | CONSTRUCTOR IDENTIFIER LP parameter_list • RP throws_clause SEMICOLON

    RP     shift, and go to state 426
    COMMA  shift, and go to state 311


State 416

  225 field_member: FINAL type_specifier IDENTIFIER initializer_opt • SEMICOLON

    SEMICOLON  shift, and go to state 427


State 417

  208 method_function_definition: type_specifier IDENTIFIER LP RP • throws_clause block
  210                           | type_specifier IDENTIFIER LP RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 428


State 418

   39 parameter_list: parameter_list • COMMA type_specifier IDENTIFIER
  207 method_function_definition: type_specifier IDENTIFIER LP parameter_list • RP throws_clause block
  209                           | type_specifier IDENTIFIER LP parameter_list • RP throws_clause SEMICOLON

    RP     shift, and go to state 429
    COMMA  shift, and go to state 311


State 419

   45 expression: expression • COMMA assignment_expression
  222 initializer_opt: ASSIGN_T expression •

    COMMA  shift, and go to state 137

    $default  reduce using rule 222 (initializer_opt)


State 420

  223 field_member: type_specifier IDENTIFIER initializer_opt SEMICOLON •

    $default  reduce using rule 223 (field_member)


State 421

  226 field_member: class_or_member_modifier_list FINAL type_specifier IDENTIFIER • initializer_opt SEMICOLON

    ASSIGN_T  shift, and go to state 407

    $default  reduce using rule 221 (initializer_opt)

    initializer_opt  go to state 430


State 422

  224 field_member: class_or_member_modifier_list type_specifier IDENTIFIER initializer_opt • SEMICOLON

    SEMICOLON  shift, and go to state 431


State 423

  141 elsif: ELSIF LP expression RP block •

    $default  reduce using rule 141 (elsif)


State 424

  153 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block •

    $default  reduce using rule 153 (for_statement)


State 425

  216 constructor_definition: CONSTRUCTOR IDENTIFIER LP RP throws_clause • block
  218                       | CONSTRUCTOR IDENTIFIER LP RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 432

    block  go to state 433


State 426

  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list RP • throws_clause block
  217                       | CONSTRUCTOR IDENTIFIER LP parameter_list RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 434


State 427

  225 field_member: FINAL type_specifier IDENTIFIER initializer_opt SEMICOLON •

    $default  reduce using rule 225 (field_member)


State 428

  208 method_function_definition: type_specifier IDENTIFIER LP RP throws_clause • block
  210                           | type_specifier IDENTIFIER LP RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 435

    block  go to state 436


State 429

  207 method_function_definition: type_specifier IDENTIFIER LP parameter_list RP • throws_clause block
  209                           | type_specifier IDENTIFIER LP parameter_list RP • throws_clause SEMICOLON

    THROWS  shift, and go to state 307

    $default  reduce using rule 211 (throws_clause)

    throws_clause  go to state 437


State 430

  226 field_member: class_or_member_modifier_list FINAL type_specifier IDENTIFIER initializer_opt • SEMICOLON

    SEMICOLON  shift, and go to state 438


State 431

  224 field_member: class_or_member_modifier_list type_specifier IDENTIFIER initializer_opt SEMICOLON •

    $default  reduce using rule 224 (field_member)


State 432

  218 constructor_definition: CONSTRUCTOR IDENTIFIER LP RP throws_clause SEMICOLON •

    $default  reduce using rule 218 (constructor_definition)


State 433

  216 constructor_definition: CONSTRUCTOR IDENTIFIER LP RP throws_clause block •

    $default  reduce using rule 216 (constructor_definition)


State 434

  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause • block
  217                       | CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 439

    block  go to state 440


State 435

  210 method_function_definition: type_specifier IDENTIFIER LP RP throws_clause SEMICOLON •

    $default  reduce using rule 210 (method_function_definition)


State 436

  208 method_function_definition: type_specifier IDENTIFIER LP RP throws_clause block •

    $default  reduce using rule 208 (method_function_definition)


State 437

  207 method_function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause • block
  209                           | type_specifier IDENTIFIER LP parameter_list RP throws_clause • SEMICOLON

    LC         shift, and go to state 120
    SEMICOLON  shift, and go to state 441

    block  go to state 442


State 438

  226 field_member: class_or_member_modifier_list FINAL type_specifier IDENTIFIER initializer_opt SEMICOLON •

    $default  reduce using rule 226 (field_member)


State 439

  217 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause SEMICOLON •

    $default  reduce using rule 217 (constructor_definition)


State 440

  215 constructor_definition: CONSTRUCTOR IDENTIFIER LP parameter_list RP throws_clause block •

    $default  reduce using rule 215 (constructor_definition)


State 441

  209 method_function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause SEMICOLON •

    $default  reduce using rule 209 (method_function_definition)


State 442

  207 method_function_definition: type_specifier IDENTIFIER LP parameter_list RP throws_clause block •

    $default  reduce using rule 207 (method_function_definition)
