fn print(s: str) -> void;
fn println(s: str) -> void {
  print(s + "\n");
}

pub struct File {
  pub fp: native_pointer;
  constructor initialize(fp: native_pointer) {
    this.fp = fp;
  }
}

fn fopen(file_name: str, mode: str) -> File;
fn fgets(file: File) -> str;
fn fputs(s: str, file: File) -> void;
fn fclose(file: File) -> void;

fn to_f64(i32_value: i32) -> f64 {
  return i32_value;
}

fn to_i32(f64_value: f64) -> i32 {
  return f64_value;
}

fn parse_int(s: str) -> i32 throws NumberFormatException;
fn parse_f64(s: str) -> f64 throws NumberFormatException;

fn exit(status: i32) -> void;
fn randomize() -> void;
fn random(range: i32) -> i32;

struct StackTrace {
  pub line_number: i32;
  pub file_name: str;
  pub function_name: str;
}

abstract pub struct Exception {
  pub message: str;
  pub stack_trace: StackTrace[];
  pub fn print_stack_trace(this) -> void {
    let i: i32;
    println("Exception occured. " + this.message);
    for (i = 0; i < this.stack_trace.size(); i++) {
      println("\tat "
        + this.stack_trace[i].function_name
        + "(" + this.stack_trace[i].file_name
        + ":" + this.stack_trace[i].line_number
        + ")");
    }
  }
  pub virtual constructor initialize() {
    this.stack_trace = new StackTrace[0];
  }
}

abstract pub struct BugException : Exception {
}

abstract pub struct RuntimeException : Exception {
}

pub struct NullPointerException : BugException {
}

pub struct ArrayIndexOutOfBoundsException : BugException {
}

pub struct StringIndexOutOfBoundsException : BugException {
}

pub struct DivisionByZeroException : RuntimeException {
}

pub struct MultibyteCharacterConvertionException : RuntimeException {
}

pub struct ClassCastException : BugException {
}

pub abstract struct ApplicationException : Exception {
}

pub struct NumberFormatException : ApplicationException {
}

delegate fn HogeDelegate(value: i32) -> i32;

// BUGBUG for test routine
fn test_native(dele: HogeDelegate) -> void;

fn foo_file(file: File) -> void {
}
